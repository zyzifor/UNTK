<?xml version="1.0" encoding="utf-8"?>
<Pou FileVersion="200.00.003" Name="processDioMK541N" ElementGuid="40d3c6b2-2f5e-43c6-ab83-872c6e312857" Comment="" SingleTextLine="Модуль МК-541-002 Modbus RTU" Language="ST" CustomFbd="0" Localization="Prj" GroupName="(User defined)" GenDebugInfo="false" UseResPassword="true" GenerateSymbMon="true" Is1499="false">
  <Function IdentifierNb="0" Keyword="" ConvDirection="NoConversion" DataType="DINT" />
  <LocalVars>
    <Variable Name="processDioMK541N" DataType="DINT" InitialValue="" Comment="" Address="" Modifier="Constant" Kind="VarOutput" Alias="" AccessRights="Write" StringSize="0" Direction="Output" CommentFields="" Attributes="23825" />
    <Variable Name="iPrgModify" DataType="BOOL" InitialValue="" Comment="Полная перезагрузка ПЛК" Address="" Modifier="Constant" Kind="VarInput" Alias="" AccessRights="Read" StringSize="0" Direction="Input" CommentFields="" Attributes="0" />
    <Variable Name="_offP1Req" DataType="DINT" InitialValue="" Comment="" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_enP1" DataType="BOOL" InitialValue="" Comment="Есть запрос" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_dRes" DataType="DINT" InitialValue="" Comment="" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_byte" DataType="BYTE" InitialValue="" Comment="" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_enP2" DataType="BOOL" InitialValue="" Comment="Есть запрос" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_offP2Req" DataType="DINT" InitialValue="" Comment="" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_bres" DataType="BOOL" InitialValue="" Comment="" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_onP1Req" DataType="DINT" InitialValue="" Comment="" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_cntP1En" DataType="INT" InitialValue="" Comment="Счётчик активированных запросов" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_onP2Req" DataType="DINT" InitialValue="" Comment="" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_errP1" DataType="BOOL" InitialValue="" Comment="Неисправность запроса" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_CommCode" DataType="DINT" InitialValue="" Comment="" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="i" DataType="DINT" InitialValue="" Comment="Счётчик" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_word" DataType="WORD" InitialValue="" Comment="" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_cntP2En" DataType="INT" InitialValue="" Comment="Счётчик активированных запросов" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_errP2" DataType="BOOL" InitialValue="" Comment="Неисправность запроса" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="j" DataType="DINT" InitialValue="" Comment="Счётчик" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_cntP1Err" DataType="INT" InitialValue="" Comment="Счётчик не выполненных запросов" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_ires" DataType="INT" InitialValue="" Comment="Возвращаемое значение функции" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_cntP2Err" DataType="INT" InitialValue="" Comment="Счётчик не выполненных запросов" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="n" DataType="DINT" InitialValue="" Comment="Счётчик" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
  </LocalVars>
  <PouBody><![CDATA[FUNCTION processDioMK541N
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Name            Data Type      Dimension            Direction  Attribute       Comment                             *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* processDioMK541N  DINT                                VarOutput  Write           Результат выполнения функции *)
(* iDioMK541N         typDioMK541N                           Var        Read/Write      Рабочий объект *)
(* i               DINT                                Var        Read/Write      Счётчик *)
(* _bRes           BOOL                                Var        Read/Write      Результат функции BOOL *)
(* _dRes           DINT                                Var        Read/Write      Результат функции DINT *)
(* ------------------------------------------------------------------------------------------------------------------ *)
processDioMK541N:= sDioMK541N.iSize;
if sDioMK541N.iSize>sDioMK541N.iMax then processDioMK541N:= -sDioMK541N.iSize; return; end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проход по всем параметрам *)
i:= 1;   while i<=sDioMK541N.iSize do
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Отключение резевных объектов *)
if not dDioMK541N[i].nLogicNot then
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача в Рабочий объект *)
  iDioMK541N:= dDioMK541N[i];
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Сохраняемые переменные (чтение при первом скане) *)
  if nPrgModify then
    iDioMK541N.CommOffPort1Req00:= rDioMK541N[i].CommOffPort1Req00;(* Запросы отключенные пользователем (Порт 1. Запросы 00..31) *)
    iDioMK541N.CommOffPort1Req32:= rDioMK541N[i].CommOffPort1Req32;(* Запросы отключенные пользователем (Порт 1. Запросы 32..63) *)
    iDioMK541N.CommOffPort2Req00:= rDioMK541N[i].CommOffPort2Req00;(* Запросы отключенные пользователем (Порт 2. Запросы 00..31) *)
    iDioMK541N.CommOffPort2Req32:= rDioMK541N[i].CommOffPort2Req32;(* Запросы отключенные пользователем (Порт 2. Запросы 32..63) *)
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Начало логики *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Обработка команды *)
  _onP1Req:= -1; _onP2Req:= -1; _offP1Req:= -1; _offP2Req:= -1; 
  if iDioMK541N.CommCode>0 then
    case iDioMK541N.CommCode of
	  1000: iDioMK541N.nNPort:= false;
	  2000: iDioMK541N.nNPort:= true;
      3000: iDioMK541N.nNReq := false;
      3032: iDioMK541N.nNReq := true;
    end_case;
	(* Включение/Отключение опроса пользователем 
	   Кодировка: PCNN 
	   P:  Порт (1..2) 
	   C:  Команда (1 - Включить/2 - Отключить 
	   NN: Номер запроса *)
	_CommCode:= ANY_TO_DINT(iDioMK541N.CommCode);   
	case _CommCode/1000 of
	  1: case _CommCode/100-(_CommCode/1000)*10 of
	       1:  _onP1Req:= _CommCode-(_CommCode/100)*100;
	       2: _offP1Req:= _CommCode-(_CommCode/100)*100;
         end_case;	
	  2: case _CommCode/100-(_CommCode/1000)*10 of
	       1:  _onP2Req:= _CommCode-(_CommCode/100)*100;
	       2: _offP2Req:= _CommCode-(_CommCode/100)*100;
         end_case;	
	 end_case;
	 (* Проверка номера запроса *)
	 if _onP1Req<0 or _onP1Req>63 then _onP1Req:= -1; end_if;  if _offP1Req<0 or _offP1Req>63 then _offP1Req:= -1; end_if;
	 if _onP2Req<0 or _onP2Req>63 then _onP2Req:= -1; end_if;  if _offP2Req<0 or _offP2Req>63 then _offP2Req:= -1; end_if;
	 (* Операции с битом по номеру запроса *)
	 if  _onP1Req>=0 &  _onP1Req<=31 then iDioMK541N.CommOffPort1Req00:= SetBitToDWord(false,  _onP1Req- 0, iDioMK541N.CommOffPort1Req00); end_if;  
	 if  _onP1Req>=0 &  _onP1Req>=32 then iDioMK541N.CommOffPort1Req32:= SetBitToDWord(false,  _onP1Req-32, iDioMK541N.CommOffPort1Req32); end_if;  
	 if  _onP2Req>=0 &  _onP2Req<=31 then iDioMK541N.CommOffPort2Req00:= SetBitToDWord(false,  _onP2Req- 0, iDioMK541N.CommOffPort2Req00); end_if;  
	 if  _onP2Req>=0 &  _onP2Req>=32 then iDioMK541N.CommOffPort2Req32:= SetBitToDWord(false,  _onP2Req-32, iDioMK541N.CommOffPort2Req32); end_if;  
	 if _offP1Req>=0 & _offP1Req<=31 then iDioMK541N.CommOffPort1Req00:= SetBitToDWord(true,  _offP1Req- 0, iDioMK541N.CommOffPort1Req00); end_if;  
	 if _offP1Req>=0 & _offP1Req>=32 then iDioMK541N.CommOffPort1Req32:= SetBitToDWord(true,  _offP1Req-32, iDioMK541N.CommOffPort1Req32); end_if;  
	 if _offP2Req>=0 & _offP2Req<=31 then iDioMK541N.CommOffPort2Req00:= SetBitToDWord(true,  _offP2Req- 0, iDioMK541N.CommOffPort2Req00); end_if;  
	 if _offP2Req>=0 & _offP2Req>=32 then iDioMK541N.CommOffPort2Req32:= SetBitToDWord(true,  _offP2Req-32, iDioMK541N.CommOffPort2Req32); end_if;  
  end_if;
  iDioMK541N.CommCode:= 0;								(* Сброс команды *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Диагностика портов *)
(* Есть ошибки обмена *)
  iDioMK541N.eP1ErrReq:= false;	 _cntP1En:= 0;  _cntP1Err:= 0;          
  iDioMK541N.eP2ErrReq:= false;	 _cntP2En:= 0;  _cntP2Err:= 0;  
  j:= 0;   while j<=63 do
	(* фиксация Статуса НЕИСПРАВНОСТЬ МОДУЛЯ *)
	if iDioMK541N.eDioError then 
	  dDioMK541NData[i].xP1Status[j]:= 98; 
	  dDioMK541NData[i].xP2Status[j]:= 98; 
	end_if;
    (* фиксация Статуса ОТКЛЮЧЕН ИЗ ПРОГРАММЫ *)
	if dDioMK541NData[i].yP1Request[j].command.func_code=0 then dDioMK541NData[i].xP1Status[j]:= 201; end_if;
	if dDioMK541NData[i].yP2Request[j].command.func_code=0 then dDioMK541NData[i].xP2Status[j]:= 201; end_if;
    (* фиксация Статуса ОТКЛЮЧЕН ПОЛЬЗОВАТЕЛЕМ *)
	if    j<=31 then 
	  if GetBitFromDWord(iDioMK541N.CommOffPort1Req00, j- 0) then dDioMK541NData[i].xP1Status[j]:= 99; dDioMK541NData[i].yP1Request[j].enable:= false; end_if;
	  if GetBitFromDWord(iDioMK541N.CommOffPort2Req00, j- 0) then dDioMK541NData[i].xP2Status[j]:= 99; dDioMK541NData[i].yP2Request[j].enable:= false; end_if;
	elsif j>=32 then
	  if GetBitFromDWord(iDioMK541N.CommOffPort1Req32, j-32) then dDioMK541NData[i].xP1Status[j]:= 99; dDioMK541NData[i].yP1Request[j].enable:= false; end_if;
	  if GetBitFromDWord(iDioMK541N.CommOffPort2Req32, j-23) then dDioMK541NData[i].xP2Status[j]:= 99; dDioMK541NData[i].yP2Request[j].enable:= false; end_if;
	end_if;
    (* фиксация Активных запросов *)
	_enP1   := dDioMK541NData[i].yP1Request[j].enable; 
	_enP2   := dDioMK541NData[i].yP2Request[j].enable; 
    (* фиксация Ошибки запроса *)
	_errP1  := _enP1 & 
	          (dDioMK541NData[i].xP1Status[j]<>  0 & dDioMK541NData[i].xP1Status[j]<>100 & 
			   dDioMK541NData[i].xP1Status[j]<>  5 & dDioMK541NData[i].xP1Status[j]<> 30 & 
			   dDioMK541NData[i].xP1Status[j]<>254 & dDioMK541NData[i].xP1Status[j]<>255 &
			   dDioMK541NData[i].xP1Status[j]<>201) or iDioMK541N.eDioError;
	_errP2  := _enP2 & 
	          (dDioMK541NData[i].xP2Status[j]<>  0 & dDioMK541NData[i].xP2Status[j]<>100 & 
			   dDioMK541NData[i].xP2Status[j]<>  5 & dDioMK541NData[i].xP2Status[j]<> 30 &
			   dDioMK541NData[i].xP2Status[j]<>254 & dDioMK541NData[i].xP2Status[j]<>255 &
			   dDioMK541NData[i].xP2Status[j]<>201) or iDioMK541N.eDioError;
	(* Счётчики *)
	_cntP1En:= _cntP1En+ANY_TO_INT(_enP1); _cntP1Err:= _cntP1Err+ANY_TO_INT(_errP1);       
	_cntP2En:= _cntP2En+ANY_TO_INT(_enP2); _cntP2Err:= _cntP2Err+ANY_TO_INT(_errP2);
	(* есть ошибки обмена *)
	iDioMK541N.eP1ErrReq:= iDioMK541N.eP1ErrReq or _errP1;
	iDioMK541N.eP2ErrReq:= iDioMK541N.eP2ErrReq or _errP2;
  j:= j+1; end_while; 
  (* Нет связи *)
  iDioMK541N.eP1ErrAll:= _cntP1En>0 & _cntP1En=_cntP1Err;	 
  iDioMK541N.eP2ErrAll:= _cntP2En>0 & _cntP2En=_cntP2Err;
  (* Есть запросы *)
  iDioMK541N.sP1LinkTX:= _cntP1En>0 & not iDioMK541N.eDioError;				 
  iDioMK541N.sP2LinkTX:= _cntP2En>0 & not iDioMK541N.eDioError;
  (* Идёт обмен *)
  iDioMK541N.sP1Link  := _cntP1En>0 & _cntP1En>_cntP1Err;				 
  iDioMK541N.sP2Link  := _cntP2En>0 & _cntP2En>_cntP2Err;
  (* В норме *)
  iDioMK541N.sP1Ok    := not iDioMK541N.eP1ErrAll & iDioMK541N.sP1Link;				 
  iDioMK541N.sP2Ok    := not iDioMK541N.eP2ErrAll & iDioMK541N.sP2Link;				 
(* ------------------------------------------------------ *)
(* проверка nDio *)
if iDioMK541N.nDio>=1 and iDioMK541N.nDio<=sDio.iSize then
  iDio:= dDio[iDioMK541N.nDio];
(* ------------------------------------------------------ *)
(* проверка типа модуля *)
  if iDio.nType=100541002 then
  (* ---------------------------------------------------- *)
  (* Есть ошибки обмена *)
    iDioMK541N.eP1ErrReq:= not iDio.sNotModule & iDioMK541N.eP1ErrReq;	 
    iDioMK541N.eP2ErrReq:= not iDio.sNotModule & iDioMK541N.eP2ErrReq;
  (* ---------------------------------------------------- *)
  (* Нет связи *)
    iDioMK541N.eP1ErrAll:= not iDio.sNotModule & iDioMK541N.eP1ErrAll;	 
    iDioMK541N.eP2ErrAll:= not iDio.sNotModule & iDioMK541N.eP2ErrAll;
  (* состояние запросов *)
    iDio.Extend:= ANY_TO_DWORD(iDioMK541N.State);
  (* неисправность модуля *)
    iDioMK541N.eDioError:= iDio.sNotModule or iDio.sNotComp or (iDio.sNotCAN1 & iDio.sNotCAN2);
  (* тест модуля *)
    iDio.sTest:= iDioMK541N.sTestPort1Req00<>0 or iDioMK541N.CommOffPort1Req32<>0 or
	             iDioMK541N.sTestPort2Req00<>0 or iDioMK541N.CommOffPort2Req32<>0;
  (* статус запросов *)
    n:= 0;   while n<=15 do
      if not iDioMK541N.nNReq then j:= n*2; else j:= n*2+32; end_if;
      if not iDioMK541N.nNPort then
	    j:= j+0; iDio.ADC[n]:= SetByteToWord(dDioMK541NData[i].xP1Status[j], 1, iDio.ADC[n]);
        j:= j+1; iDio.ADC[n]:= SetByteToWord(dDioMK541NData[i].xP1Status[j], 0, iDio.ADC[n]);
	  else 
	    j:= j+0; iDio.ADC[n]:= SetByteToWord(dDioMK541NData[i].xP2Status[j], 1, iDio.ADC[n]);
        j:= j+1; iDio.ADC[n]:= SetByteToWord(dDioMK541NData[i].xP2Status[j], 0, iDio.ADC[n]); 
      end_if;  
      n:= n+1; end_while; 
  end_if;
  dDio[iDioMK541N.nDio]:= iDio;
(* ------------------------------------------------------ *)
end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Конец логики *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Cообщения для команд *)
  iDioMK541N.oMsAck_State:= iDioMK541N.MsAck_State;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Сохраняемые переменные (сохранение данных) *)
  rDioMK541N[i].CommOffPort1Req00:=   iDioMK541N.CommOffPort1Req00;(* Запросы отключенные пользователем (Порт 1. Запросы 00..31) *)
  rDioMK541N[i].CommOffPort1Req32:=   iDioMK541N.CommOffPort1Req32;(* Запросы отключенные пользователем (Порт 1. Запросы 32..63) *)
  rDioMK541N[i].CommOffPort2Req00:=   iDioMK541N.CommOffPort2Req00;(* Запросы отключенные пользователем (Порт 2. Запросы 00..31) *)
  rDioMK541N[i].CommOffPort2Req32:=   iDioMK541N.CommOffPort2Req32;(* Запросы отключенные пользователем (Порт 2. Запросы 32..63) *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача из Рабочего объекта *)
  dDioMK541N[i]:= iDioMK541N;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Отключение резевных объектов *)
end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Отключение резервных объектов: Сброс состояния объекта *)
if dDioMK541N[i].nLogicNot & not dDioMK541N[i].oLogicNot then
  dDioMK541N[i].sP1Ok   := false;                                (* Порт 1. В норме *)
  dDioMK541N[i].sP1Link := false;                                (* Порт 1. Идёт обмен *)
  dDioMK541N[i].sP1LinkTX:= false;                               (* Есть запросы *)  
  dDioMK541N[i].sP2Ok   := false;                                (* Порт 2. В норме *)
  dDioMK541N[i].sP2Link := false;                                (* Порт 2. Идёт обмен *)
  dDioMK541N[i].sP2LinkTX:= false;                               (* Есть запросы *)  
  dDioMK541N[i].sTest   := false;                                (* Есть режим Тестирование на объектах Dmb запроса *)
(* maskStateNone=25379 *)
end_if;
dDioMK541N[i].oLogicNot:= dDioMK541N[i].nLogicNot;
(* ------------------------------------------------------------------------------------------------------------------ *)
i:= i+1; end_while;

END_FUNCTION]]></PouBody>
  <PouUIProperties>
    <Root Version="7">
  <LanguageContainerStyle CommentTextColor="Green" CommentFont="Courier New, 10pt" PonctuationTextColor="Black" PonctuationFont="Courier New, 10pt" IdentifierTextColor="Black" IdentifierFont="Courier New, 10pt" OperatorTextColor="Black" OperatorFont="Courier New, 10pt" ReservedWordTextColor="Fuchsia" ReservedWordFont="Courier New, 10pt" PouTextColor="BlueViolet" PouFont="Courier New, 10pt" NumberTextColor="Firebrick" NumberFont="Courier New, 10pt" StringTextColor="Gray" StringFont="Courier New, 10pt" EditorTextAreaBackgroundColor="White" EditorFont="Courier New, 10pt" Index="0" />
</Root>
  </PouUIProperties>
</Pou>