FUNCTION prociombESD
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Name                Data Type      Dimension            Direction  Attribute       Comment                         *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* prociombESD         BOOL                                VarOutput  Write           Результат выполнения функции *)
(* nWr                 BOOL                                VarInput   Read            true - Запись из Modbus в ПЛК/false - чтение из ПЛК в Modbus *)
(* iData               WORD          [0...0,0...99]        Var        Read/Write      Массив промежуточных данных *)
(* iWord               WORD          [0...1]               Var        Read/Write      Массив промежуточных данных WORD *)
(* iReal               REAL          [0...0]               Var        Read/Write      Массив промежуточных данных REAL *)
(* j                   DINT                                Var        Read/Write      Счётчик *)
(* m                   DINT                                Var        Read/Write      Номер в массиве iodMBP_4x[m].regs[n] *)
(* n                   DINT                                Var        Read/Write      Номер в массиве iodMBP_4x[m].regs[n] *)
(* ------------------------------------------------------------------------------------------------------------------ *)
prociombESD:= sESD.iSize;
if sESD.iSize>sESD.iMax then prociombESD:= -sESD.iSize; return; end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проход по всем параметрам *)
i:= 1;   while i<=sESD.iSize do
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача в Рабочий объект *)
  iESD:= dESD[i];
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проверка *)
  if sESD.mbSize<=0 or
     mbESD[i, 0]<0 or mbESD[i, 0]>64 or mbESD[i, 1]<1 or mbESD[i, 1]>1024 then
     prociombESD:= -2;
  end_if;
  (* Считывание настроечных данных *)
  m:= ANY_TO_DINT(mbESD[i, 0]); n:= ANY_TO_DINT(mbESD[i, 1]);
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение данных из Modbus в ПЛК *)
  if nWr Then
    iESD.wrCRC:= CRC16ForModbusRegs(iodMBP_4x, m, n, sESD.mbSize);
    if iESD.wrCRC<>iESD.rdCRC then
      iESD.wrCount:= iESD.wrCount+1; if iESD.wrCount>1000000 then iESD.wrCount:= 1; end_if;
      _dRes:= SafeCopyFromModbusREGsArray(iodMBP_4x, iData, m, n, 0, 0, sESD.mbSize);
  (* ----------------------------------------------------------- *)
      iESD.Command      :=             iData[0,    1];                                     (* Команды *)       
      iESD.cOnOper      := iESD.Command.0;                                                 (* Команда оператора. Включить *)
      iESD.cOffOper     := iESD.Command.1;                                                 (* Команда оператора. Отключить *)
  (* ----------------------------------------------------------- *)
      iESD.MsAck_State  :=             iData[0,    2];                                     (* Состояние (Подтверждение) *)
    end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение данных из Modbus в ПЛК *)
  else
    iESD.State.0      := iESD.sOn;                                                       (* АВАРИЙНЫЙ ОСТАНОВ *)
    iESD.State.1      := iESD.xOn;                                                       (* АВАРИЙНЫЙ ОСТАНОВ (Вход общий) *)
    iESD.State.2      := iESD.fCh;                                                       (* Флаг изменения состояния *)
    iESD.State.3      := iESD.xOn1;                                                      (* АВАРИЙНЫЙ ОСТАНОВ (Вход 1) *)
    iESD.State.4      := iESD.xOn2;                                                      (* АВАРИЙНЫЙ ОСТАНОВ (Вход 2) *)
    iESD.State.5      := iESD.xOn3;                                                      (* АВАРИЙНЫЙ ОСТАНОВ (Вход 3) *)
    iESD.State.6      := iESD.xOn4;                                                      (* АВАРИЙНЫЙ ОСТАНОВ (Вход 4) *)
    iESD.State.7      := iESD.xOn5;                                                      (* АВАРИЙНЫЙ ОСТАНОВ (Вход 5) *)
    iESD.State.8      := iESD.xOn6;                                                      (* АВАРИЙНЫЙ ОСТАНОВ (Вход 6) *)
    iESD.State.9      := iESD.xOn7;                                                      (* АВАРИЙНЫЙ ОСТАНОВ (Вход 7) *)
    iESD.State.10     := iESD.xOn8;                                                      (* АВАРИЙНЫЙ ОСТАНОВ (Вход 8) *)
    iESD.State.11     := iESD.nOper;                                                     (* Останов активирует оператор *)
  (* ----------------------------------------------------------- *)
    iData[0,    0]    :=             iESD.State;                                         (* Состояние *)     
    iESD.Command.0    := iESD.cOnOper;                                                   (* Команда оператора. Включить *)
    iESD.Command.1    := iESD.cOffOper;                                                  (* Команда оператора. Отключить *)
  (* ----------------------------------------------------------- *)
    iData[0,    1]    :=             iESD.Command;                                       (* Команды *)       
  (* ----------------------------------------------------------- *)
    iData[0,    2]    :=             iESD.MsAck_State;                                   (* Состояние (Подтверждение) *)
  (* ----------------------------------------------------------- *)
    iData[0,    3]    :=             iESD.MsEvt_Command;                                 (* Команды (Сообщения) *)
(* ------------------------------------------------------------------------------------------------------------------ *)
    _dRes:= SafeCopyToModbusREGsArray(iData, iodMBP_4x, 0, 0, m, n, sESD.mbSize);
    iESD.rdCRC:= CRC16ForModbusRegs(iodMBP_4x, m, n, sESD.mbSize);
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача из Рабочего объекта *)
  dESD[i]:= iESD;
i:= i+1; end_while;
END_FUNCTION
