FUNCTION prociombDioMK541N
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Name                Data Type      Dimension            Direction  Attribute       Comment                         *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* prociombDioMK541N   BOOL                                VarOutput  Write           Результат выполнения функции *)
(* nWr                 BOOL                                VarInput   Read            true - Запись из Modbus в ПЛК/false - чтение из ПЛК в Modbus *)
(* iData               WORD          [0...0,0...99]        Var        Read/Write      Массив промежуточных данных *)
(* iWord               WORD          [0...1]               Var        Read/Write      Массив промежуточных данных WORD *)
(* iReal               REAL          [0...0]               Var        Read/Write      Массив промежуточных данных REAL *)
(* j                   DINT                                Var        Read/Write      Счётчик *)
(* m                   DINT                                Var        Read/Write      Номер в массиве iodMBP_4x[m].regs[n] *)
(* n                   DINT                                Var        Read/Write      Номер в массиве iodMBP_4x[m].regs[n] *)
(* ------------------------------------------------------------------------------------------------------------------ *)
prociombDioMK541N:= sDioMK541N.iSize;
if sDioMK541N.iSize>sDioMK541N.iMax then prociombDioMK541N:= -sDioMK541N.iSize; return; end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проход по всем параметрам *)
i:= 1;   while i<=sDioMK541N.iSize do
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача в Рабочий объект *)
  iDioMK541N:= dDioMK541N[i];
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проверка *)
  if sDioMK541N.mbSize<=0 or
     mbDioMK541N[i, 0]<0 or mbDioMK541N[i, 0]>64 or mbDioMK541N[i, 1]<1 or mbDioMK541N[i, 1]>1024 then
     prociombDioMK541N:= -2;
  end_if;
  (* Считывание настроечных данных *)
  m:= ANY_TO_DINT(mbDioMK541N[i, 0]); n:= ANY_TO_DINT(mbDioMK541N[i, 1]);
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение данных из Modbus в ПЛК *)
  if nWr Then
    iDioMK541N.wrCRC:= CRC16ForModbusRegs(iodMBP_4x, m, n, sDioMK541N.mbSize);
    if iDioMK541N.wrCRC<>iDioMK541N.rdCRC then
      iDioMK541N.wrCount:= iDioMK541N.wrCount+1; if iDioMK541N.wrCount>1000000 then iDioMK541N.wrCount:= 1; end_if;
      _dRes:= SafeCopyFromModbusREGsArray(iodMBP_4x, iData, m, n, 0, 0, sDioMK541N.mbSize);
  (* ----------------------------------------------------------- *)
      iDioMK541N.CommCode:=            iData[0,    1];                                     (* Код команды *)   
  (* ----------------------------------------------------------- *)
      iDioMK541N.MsAck_State:=         iData[0,   18];                                     (* Состояние (Подтверждение) *)
    end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение данных из Modbus в ПЛК *)
  else
    iDioMK541N.State.0:= iDioMK541N.sP1Ok;                                               (* Порт 1. В норме *)
    iDioMK541N.State.1:= iDioMK541N.sP1Link;                                             (* Порт 1. Идёт обмен *)
    iDioMK541N.State.2:= iDioMK541N.eP1ErrReq;                                           (* Порт 1. Есть ошибки обмена *)
    iDioMK541N.State.3:= iDioMK541N.eP1ErrAll;                                           (* Порт 1. Нет связи *)
    iDioMK541N.State.4:= iDioMK541N.nP1Slave;                                            (* Порт 1. В режиме Slave *)
    iDioMK541N.State.5:= iDioMK541N.sP1LinkTX;                                           (* Есть запросы *)  
    iDioMK541N.State.6:= iDioMK541N.nNReq;                                               (* Номер запросов для отладки *)
    iDioMK541N.State.7:= iDioMK541N.nNPort;                                              (* Номер порта для отладки *)
    iDioMK541N.State.8:= iDioMK541N.sP2Ok;                                               (* Порт 2. В норме *)
    iDioMK541N.State.9:= iDioMK541N.sP2Link;                                             (* Порт 2. Идёт обмен *)
    iDioMK541N.State.10:= iDioMK541N.eP2ErrReq;                                          (* Порт 2. Есть ошибки обмена *)
    iDioMK541N.State.11:= iDioMK541N.eP2ErrAll;                                          (* Порт 2. Нет связи *)
    iDioMK541N.State.12:= iDioMK541N.nP2Slave;                                           (* Порт 2. В режиме Slave *)
    iDioMK541N.State.13:= iDioMK541N.sP2LinkTX;                                          (* Есть запросы *)  
    iDioMK541N.State.14:= iDioMK541N.sTest;                                              (* Есть режим Тестирование на объектах Dmb запроса *)
    iDioMK541N.State.15:= iDioMK541N.eDioError;                                          (* Неисправность модуля MK541 *)
  (* ----------------------------------------------------------- *)
    iData[0,    0]    :=             iDioMK541N.State;                                   (* Состояние *)     
  (* ----------------------------------------------------------- *)
    iData[0,    1]    :=             iDioMK541N.CommCode;                                (* Код команды *)   
  (* ----------------------------------------------------------- *)
    iData[0,    2]    := GetWordFromDWord(iDioMK541N.CommOffPort1Req00, 0);              (* Запросы отключенные пользователем (Порт 1. Запросы 00..31) Low Word *)
    iData[0,    3]    := GetWordFromDWord(iDioMK541N.CommOffPort1Req00, 1);              (* Запросы отключенные пользователем (Порт 1. Запросы 00..31) Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,    4]    := GetWordFromDWord(iDioMK541N.CommOffPort1Req32, 0);              (* Запросы отключенные пользователем (Порт 1. Запросы 32..63) Low Word *)
    iData[0,    5]    := GetWordFromDWord(iDioMK541N.CommOffPort1Req32, 1);              (* Запросы отключенные пользователем (Порт 1. Запросы 32..63) Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,    6]    := GetWordFromDWord(iDioMK541N.CommOffPort2Req00, 0);              (* Запросы отключенные пользователем (Порт 2. Запросы 00..31) Low Word *)
    iData[0,    7]    := GetWordFromDWord(iDioMK541N.CommOffPort2Req00, 1);              (* Запросы отключенные пользователем (Порт 2. Запросы 00..31) Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,    8]    := GetWordFromDWord(iDioMK541N.CommOffPort2Req32, 0);              (* Запросы отключенные пользователем (Порт 2. Запросы 32..63) Low Word *)
    iData[0,    9]    := GetWordFromDWord(iDioMK541N.CommOffPort2Req32, 1);              (* Запросы отключенные пользователем (Порт 2. Запросы 32..63) Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   10]    := GetWordFromDWord(iDioMK541N.sTestPort1Req00, 0);                (* Включен режим тестирования на Dmb запроса (Порт 1. Запросы 00..31) Low Word *)
    iData[0,   11]    := GetWordFromDWord(iDioMK541N.sTestPort1Req00, 1);                (* Включен режим тестирования на Dmb запроса (Порт 1. Запросы 00..31) Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   12]    := GetWordFromDWord(iDioMK541N.sTestPort1Req32, 0);                (* Включен режим тестирования на Dmb запроса (Порт 1. Запросы 32..63) Low Word *)
    iData[0,   13]    := GetWordFromDWord(iDioMK541N.sTestPort1Req32, 1);                (* Включен режим тестирования на Dmb запроса (Порт 1. Запросы 32..63) Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   14]    := GetWordFromDWord(iDioMK541N.sTestPort2Req00, 0);                (* Включен режим тестирования на Dmb запроса (Порт 2. Запросы 00..31) Low Word *)
    iData[0,   15]    := GetWordFromDWord(iDioMK541N.sTestPort2Req00, 1);                (* Включен режим тестирования на Dmb запроса (Порт 2. Запросы 00..31) Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   16]    := GetWordFromDWord(iDioMK541N.sTestPort2Req32, 0);                (* Включен режим тестирования на Dmb запроса (Порт 2. Запросы 32..63) Low Word *)
    iData[0,   17]    := GetWordFromDWord(iDioMK541N.sTestPort2Req32, 1);                (* Включен режим тестирования на Dmb запроса (Порт 2. Запросы 32..63) Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   18]    :=             iDioMK541N.MsAck_State;                             (* Состояние (Подтверждение) *)
(* ------------------------------------------------------------------------------------------------------------------ *)
    _dRes:= SafeCopyToModbusREGsArray(iData, iodMBP_4x, 0, 0, m, n, sDioMK541N.mbSize);
    iDioMK541N.rdCRC:= CRC16ForModbusRegs(iodMBP_4x, m, n, sDioMK541N.mbSize);
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача из Рабочего объекта *)
  dDioMK541N[i]:= iDioMK541N;
i:= i+1; end_while;
END_FUNCTION