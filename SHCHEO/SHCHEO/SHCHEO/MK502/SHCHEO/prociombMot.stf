FUNCTION prociombMot
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Name                Data Type      Dimension            Direction  Attribute       Comment                         *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* prociombMot         BOOL                                VarOutput  Write           Результат выполнения функции *)
(* nWr                 BOOL                                VarInput   Read            true - Запись из Modbus в ПЛК/false - чтение из ПЛК в Modbus *)
(* iData               WORD          [0...0,0...99]        Var        Read/Write      Массив промежуточных данных *)
(* iWord               WORD          [0...1]               Var        Read/Write      Массив промежуточных данных WORD *)
(* iReal               REAL          [0...0]               Var        Read/Write      Массив промежуточных данных REAL *)
(* j                   DINT                                Var        Read/Write      Счётчик *)
(* m                   DINT                                Var        Read/Write      Номер в массиве iodMBP_4x[m].regs[n] *)
(* n                   DINT                                Var        Read/Write      Номер в массиве iodMBP_4x[m].regs[n] *)
(* ------------------------------------------------------------------------------------------------------------------ *)
prociombMot:= sMot.iSize;
if sMot.iSize>sMot.iMax then prociombMot:= -sMot.iSize; return; end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проход по всем параметрам *)
i:= 1;   while i<=sMot.iSize do
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача в Рабочий объект *)
  iMot:= dMot[i];
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проверка *)
  if sMot.mbSize<=0 or
     mbMot[i, 0]<0 or mbMot[i, 0]>64 or mbMot[i, 1]<1 or mbMot[i, 1]>1024 then
     prociombMot:= -2;
  end_if;
  (* Считывание настроечных данных *)
  m:= ANY_TO_DINT(mbMot[i, 0]); n:= ANY_TO_DINT(mbMot[i, 1]);
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение данных из Modbus в ПЛК *)
  if nWr Then
    iMot.wrCRC:= CRC16ForModbusRegs(iodMBP_4x, m, n, sMot.mbSize);
    if iMot.wrCRC<>iMot.rdCRC then
      iMot.wrCount:= iMot.wrCount+1; if iMot.wrCount>1000000 then iMot.wrCount:= 1; end_if;
      _dRes:= SafeCopyFromModbusREGsArray(iodMBP_4x, iData, m, n, 0, 0, sMot.mbSize);
  (* ----------------------------------------------------------- *)
      iMot.Command      := SetWordToDWord(iData[0,    3], 0, iMot.Command);                (* Команды Low Word *)
      iMot.Command      := SetWordToDWord(iData[0,    4], 1, iMot.Command);                (* Команды Hi Word *)
      iMot.cImitOn      := iMot.Command.0;                                                 (* Команда оператора. Режим имитации Включить *)
      iMot.cImitOff     := iMot.Command.1;                                                 (* Команда оператора. Режим имитации Отключить *)
      iMot.cOnOper      := iMot.Command.2;                                                 (* Команда оператора. Включить *)
      iMot.cOffOper     := iMot.Command.3;                                                 (* Команда оператора. Отключить *)
      iMot.cDebl        := iMot.Command.8;                                                 (* Деблокировать Неисправность *)
      iMot.cDist        := iMot.Command.9;                                                 (* Команда оператора. Включить режим Дист. управления *)
      iMot.cLocal       := iMot.Command.10;                                                (* Команда оператора. Включить режим Местн. управления *)
      iMot.cAuto        := iMot.Command.11;                                                (* Команда оператора. Режим Автомат *)
      iMot.cReserve     := iMot.Command.12;                                                (* Команда оператора. Режим Резерв *)
      iMot.cHandle      := iMot.Command.13;                                                (* Команда оператора. Режим Ручной *)
      iMot.cRepair      := iMot.Command.14;                                                (* Команда оператора. Режим Ремонт *)
      iMot.cEdit        := iMot.Command.15;                                                (* Переключить: Режим редактирования наработки *)
      iMot.cImitWork    := iMot.Command.20;                                                (* Не имитировать рабочий режим *)
  (* ----------------------------------------------------------- *)
      iMot.wTWork       := ANY_TO_DINT(SetWordToDWord(iData[0,   13], 0, ANY_TO_DWORD(iMot.wTWork)));(* Наработка ЧЧЧЧЧЧММСС Low Word *)
      iMot.wTWork       := ANY_TO_DINT(SetWordToDWord(iData[0,   14], 1, ANY_TO_DWORD(iMot.wTWork)));(* Наработка ЧЧЧЧЧЧММСС Hi Word *)
  (* ----------------------------------------------------------- *)
      iMot.MsAck_State  :=             iData[0,   17];                                     (* Состояние (Подтверждение) *)
  (* ----------------------------------------------------------- *)
      iMot.tTimer1      :=             iData[0,   20];                                     (* Т01 Срабатывание эл. цепей <сек.> *)
  (* ----------------------------------------------------------- *)
      iMot.tTimer2      :=             iData[0,   21];                                     (* Т02 Выход на Рабочий режим <сек.> *)
  (* ----------------------------------------------------------- *)
      iMot.tTimer3      :=             iData[0,   22];                                     (* Т03 Контроль Рабочего режима в работе <сек.> *)
  (* ----------------------------------------------------------- *)
      iMot.tTimer11     :=             iData[0,   23];                                     (* Т11 Авт. управл. оборуд. на входе <сек.> *)
  (* ----------------------------------------------------------- *)
      iMot.tTimer12     :=             iData[0,   24];                                     (* Т12 Авт. управл. оборуд. на выходе <сек.> *)
  (* ----------------------------------------------------------- *)
      iMot.tEnableSet   :=             iData[0,   25];                                     (* Флаги включения уставок *)
    end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение данных из Modbus в ПЛК *)
  else
    iMot.State.0      := iMot.sOn;                                                       (* Включен *)       
    iMot.State.1      := iMot.sOff;                                                      (* Отключен *)      
    iMot.State.2      := iMot.sConnect;                                                  (* Включается *)    
    iMot.State.3      := iMot.sDisconn;                                                  (* Отключается *)   
    iMot.State.4      := iMot.rAuto;                                                     (* Режим Автомат *) 
    iMot.State.5      := iMot.rReserve;                                                  (* Режим Резерв *)  
    iMot.State.6      := iMot.rHandle;                                                   (* Режим Ручной *)  
    iMot.State.7      := iMot.rRepair;                                                   (* Режим Ремонт *)  
    iMot.State.8      := iMot.sImit;                                                     (* Имитация *)      
    iMot.State.9      := iMot.sDist;                                                     (* Управление Дистанционное *)
    iMot.State.10     := iMot.sLocal;                                                    (* Управление Местное *)
    iMot.State.11     := iMot.sNo;                                                       (* Управление Отключено *)
    iMot.State.12     := iMot.sPower;                                                    (* Есть напряжение в схеме управл. *)
    iMot.State.13     := iMot.sWork;                                                     (* Вышел на рабочий режим *)
    iMot.State.14     := iMot.sReady;                                                    (* Готов к управлению *)
    iMot.State.15     := iMot.sNotPower;                                                 (* Нет напряжения в схеме управления *)
    iMot.State.16     := iMot.sNotReady;                                                 (* Не готов к управлению *)
    iMot.State.17     := iMot.mcNotMode;                                                 (* Управл. невозможно. Режим НЕ Автомат *)
    iMot.State.18     := iMot.mcNotWork;                                                 (* Управл. невозможно. НЕТ ГОТОВНОСТИ СХЕМЫ *)
    iMot.State.19     := iMot.sError;                                                    (* Неисправность *) 
    iMot.State.20     := iMot.eOn;                                                       (* Неисправен. Не включился *)
    iMot.State.21     := iMot.eOff;                                                      (* Неисправен. Несанкционир. отключение *)
    iMot.State.22     := iMot.eWork;                                                     (* Неисправен. Нет Рабочего режима при работе *)
    iMot.State.23     := iMot.eOnWork;                                                   (* Неисправен. Не вышел на Рабочий режим *)
    iMot.State.24     := iMot.eOnFlt;                                                    (* Неисправен. Неисправна цепь Включить *)
    iMot.State.25     := iMot.eExtErr;                                                   (* Неисправен. Неиспр. схемы управления *)
    iMot.State.26     := iMot.ePLCErr;                                                   (* Неисправен. Внешняя причина *)
    iMot.State.27     := iMot.eDsoCmd;                                                   (* Невыполнение команды ПАЗ *)
  (* ----------------------------------------------------------- *)
    iData[0,    0]    := GetWordFromDWord(iMot.State, 0);                                (* Состояние Low Word *)
    iData[0,    1]    := GetWordFromDWord(iMot.State, 1);                                (* Состояние Hi Word *)
    iMot.DState.0     := iMot.fSafe;                                                     (* Команда в безопасном режиме *)
    iMot.DState.1     := iMot.nEdit;                                                     (* Режим редактирования наработки *)
    iMot.DState.2     := iMot.fOnMsk;                                                    (* Включение невозможно *)
    iMot.DState.3     := iMot.fOffMsk;                                                   (* Отключение невозможно *)
    iMot.DState.4     := iMot.fReserveMsk;                                               (* Режим Резерв невозможен *)
    iMot.DState.5     := iMot.fDsoOnOn;                                                  (* Воздействие ПАЗ активно. Включить (Безопасный режим) *)
    iMot.DState.6     := iMot.fDsoOffOn;                                                 (* Воздействие ПАЗ активно. Отключить (Безопасный режим) *)
  (* ----------------------------------------------------------- *)
    iData[0,    2]    :=             iMot.DState;                                        (* Состояние. Дополнительное *)
    iMot.Command.0    := iMot.cImitOn;                                                   (* Команда оператора. Режим имитации Включить *)
    iMot.Command.1    := iMot.cImitOff;                                                  (* Команда оператора. Режим имитации Отключить *)
    iMot.Command.2    := iMot.cOnOper;                                                   (* Команда оператора. Включить *)
    iMot.Command.3    := iMot.cOffOper;                                                  (* Команда оператора. Отключить *)
    iMot.Command.4    := iMot.cOnAuto;                                                   (* Команда Автоматическая. Включить *)
    iMot.Command.5    := iMot.cOffAuto;                                                  (* Команда Автоматическая. Отключить *)
    iMot.Command.6    := iMot.cOnSafe;                                                   (* Команда Включить ПАЗ *)
    iMot.Command.7    := iMot.cOffSafe;                                                  (* Команда Отключить ПАЗ *)
    iMot.Command.8    := iMot.cDebl;                                                     (* Деблокировать Неисправность *)
    iMot.Command.9    := iMot.cDist;                                                     (* Команда оператора. Включить режим Дист. управления *)
    iMot.Command.10   := iMot.cLocal;                                                    (* Команда оператора. Включить режим Местн. управления *)
    iMot.Command.11   := iMot.cAuto;                                                     (* Команда оператора. Режим Автомат *)
    iMot.Command.12   := iMot.cReserve;                                                  (* Команда оператора. Режим Резерв *)
    iMot.Command.13   := iMot.cHandle;                                                   (* Команда оператора. Режим Ручной *)
    iMot.Command.14   := iMot.cRepair;                                                   (* Команда оператора. Режим Ремонт *)
    iMot.Command.15   := iMot.cEdit;                                                     (* Переключить: Режим редактирования наработки *)
    iMot.Command.16   := iMot.cAutoAuto;                                                 (* Команда Автоматическая. Режим Автомат *)
    iMot.Command.17   := iMot.cReserveAuto;                                              (* Команда Автоматическая. Режим Резерв *)
    iMot.Command.18   := iMot.cHandleAuto;                                               (* Команда Автоматическая. Режим Ручной *)
    iMot.Command.19   := iMot.cRepairAuto;                                               (* Команда Автоматическая. Режим Ремонт *)
    iMot.Command.20   := iMot.cImitWork;                                                 (* Не имитировать рабочий режим *)
  (* ----------------------------------------------------------- *)
    iData[0,    3]    := GetWordFromDWord(iMot.Command, 0);                              (* Команды Low Word *)
    iData[0,    4]    := GetWordFromDWord(iMot.Command, 1);                              (* Команды Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,    5]    := GetWordFromDWord(ANY_TO_DWORD(iMot.wTDateOn), 0);               (* Дата последнего включения Low Word *)
    iData[0,    6]    := GetWordFromDWord(ANY_TO_DWORD(iMot.wTDateOn), 1);               (* Дата последнего включения Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,    7]    := GetWordFromDWord(ANY_TO_DWORD(iMot.wTTimeOn), 0);               (* Время последнего включения Low Word *)
    iData[0,    8]    := GetWordFromDWord(ANY_TO_DWORD(iMot.wTTimeOn), 1);               (* Время последнего включения Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,    9]    := GetWordFromDWord(ANY_TO_DWORD(iMot.wTDateOff), 0);              (* Дата последнего отключения Low Word *)
    iData[0,   10]    := GetWordFromDWord(ANY_TO_DWORD(iMot.wTDateOff), 1);              (* Дата последнего отключения Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   11]    := GetWordFromDWord(ANY_TO_DWORD(iMot.wTTimeOff), 0);              (* Время последнего отключения Low Word *)
    iData[0,   12]    := GetWordFromDWord(ANY_TO_DWORD(iMot.wTTimeOff), 1);              (* Время последнего отключения Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   13]    := GetWordFromDWord(ANY_TO_DWORD(iMot.wTWork), 0);                 (* Наработка ЧЧЧЧЧЧММСС Low Word *)
    iData[0,   14]    := GetWordFromDWord(ANY_TO_DWORD(iMot.wTWork), 1);                 (* Наработка ЧЧЧЧЧЧММСС Hi Word *)
    iMot.Tune.0       := iMot.nDist;                                                     (* Наличие Дист. управл. *)
    iMot.Tune.1       := iMot.nDistOper;                                                 (* Дист. Управл. устанавливается оператором *)
    iMot.Tune.2       := iMot.nMode;                                                     (* Наличие режимов управл. *)
    iMot.Tune.3       := iMot.nReserve;                                                  (* Наличие режима Резерв *)
    iMot.Tune.4       := iMot.nReady;                                                    (* Контроль готовности *)
    iMot.Tune.5       := iMot.nPower;                                                    (* Наличие Контроля напряжения в сх. управл. *)
    iMot.Tune.6       := iMot.nWork;                                                     (* Выход на режим контролируется *)
    iMot.Tune.7       := iMot.nOnFlt;                                                    (* Контроль неисправности канала Включить *)
    iMot.Tune.8       := iMot.nOff;                                                      (* Есть контроль несанкционированного отключения *)
    iMot.Tune.9       := iMot.nOffOn;                                                    (* Авт. Отключить при не включении МП *)
    iMot.Tune.10      := iMot.nOffOnWork;                                                (* Авт. Отключить при не выходе на Рабочий режим *)
    iMot.Tune.11      := iMot.nOffWork;                                                  (* Авт. Отключить при потере Рабочего режима в работе *)
    iMot.Tune.12      := iMot.nOffExtErr;                                                (* Авт. Отключить при неисправности эл. схемы агрегата *)
    iMot.Tune.13      := iMot.nOffBlock;                                                 (* Держать контакт Отключить при наличии внешней блокировки *)
    iMot.Tune.14      := iMot.nLong;                                                     (* Удерживать команду *)
    iMot.Tune.15      := iMot.nExtLogic;                                                 (* Логика объекта обрабатывается на внешнем устройстве *)
    iMot.Tune.16      := iMot.nExtCommand;                                               (* Команды объекта обрабатываются на внешнем устройстве *)
    iMot.Tune.17      := iMot.nExtMode;                                                  (* Режимы управления считываются в внешних входов *)
    iMot.Tune.18      := iMot.nExtImit;                                                  (* Режим имитации считывается в внешних входов *)
    iMot.Tune.19      := iMot.nExtTWork;                                                 (* Наработка считывается в внешних входов *)
    iMot.Tune.20      := iMot.nImitWorkNot;                                              (* Не имитировать рабочий режим *)
    iMot.Tune.21      := iMot.nOnR;                                                      (* МП включен (Резерв) *)
    iMot.Tune.22      := iMot.nDistR;                                                    (* Управление Дистанционное (Резерв) *)
    iMot.Tune.23      := iMot.nLocalR;                                                   (* Управление Местное (Резерв) *)
    iMot.Tune.24      := iMot.nPowerR;                                                   (* Напряжение в схеме управления (Резерв) *)
    iMot.Tune.25      := iMot.nReadyR;                                                   (* Готовность (Резерв) *)
    iMot.Tune.26      := iMot.nVlvInOk;                                                  (* Запорная арматура на входе *)
    iMot.Tune.27      := iMot.nVlvOutOk;                                                 (* Запорная арматура на выходе *)
    iMot.Tune.28      := iMot.nESDCmdOn;                                                 (* Разрешить управление под ПАЗ *)
    iMot.Tune.29      := iMot.nESDErrDebl;                                               (* Возобновить действие после деблокировки неисправности при сработанной ПАЗ *)
  (* ----------------------------------------------------------- *)
    iData[0,   15]    := GetWordFromDWord(iMot.Tune, 0);                                 (* Настройки Low Word *)
    iData[0,   16]    := GetWordFromDWord(iMot.Tune, 1);                                 (* Настройки Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   17]    :=             iMot.MsAck_State;                                   (* Состояние (Подтверждение) *)
  (* ----------------------------------------------------------- *)
    iData[0,   18]    := GetWordFromDWord(iMot.MsEvt_Command, 0);                        (* Команды (Сообщения) Low Word *)
    iData[0,   19]    := GetWordFromDWord(iMot.MsEvt_Command, 1);                        (* Команды (Сообщения) Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   20]    :=             iMot.tTimer1;                                       (* Т01 Срабатывание эл. цепей <сек.> *)
  (* ----------------------------------------------------------- *)
    iData[0,   21]    :=             iMot.tTimer2;                                       (* Т02 Выход на Рабочий режим <сек.> *)
  (* ----------------------------------------------------------- *)
    iData[0,   22]    :=             iMot.tTimer3;                                       (* Т03 Контроль Рабочего режима в работе <сек.> *)
  (* ----------------------------------------------------------- *)
    iData[0,   23]    :=             iMot.tTimer11;                                      (* Т11 Авт. управл. оборуд. на входе <сек.> *)
  (* ----------------------------------------------------------- *)
    iData[0,   24]    :=             iMot.tTimer12;                                      (* Т12 Авт. управл. оборуд. на выходе <сек.> *)
  (* ----------------------------------------------------------- *)
    iData[0,   25]    :=             iMot.tEnableSet;                                    (* Флаги включения уставок *)
(* ------------------------------------------------------------------------------------------------------------------ *)
    _dRes:= SafeCopyToModbusREGsArray(iData, iodMBP_4x, 0, 0, m, n, sMot.mbSize);
    iMot.rdCRC:= CRC16ForModbusRegs(iodMBP_4x, m, n, sMot.mbSize);
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача из Рабочего объекта *)
  dMot[i]:= iMot;
i:= i+1; end_while;
END_FUNCTION
