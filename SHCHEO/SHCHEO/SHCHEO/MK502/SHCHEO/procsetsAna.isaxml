<?xml version="1.0" encoding="utf-8"?>
<Pou FileVersion="200.00.003" Name="procsetsAna" ElementGuid="bc7c8720-8dbf-4e9a-b0f0-1e4c1f17413e" Comment="" SingleTextLine="" Language="ST" CustomFbd="0" Localization="Prj" GroupName="(User defined)" GenDebugInfo="false" UseResPassword="true" GenerateSymbMon="true" Is1499="false">
  <Function IdentifierNb="0" Keyword="" ConvDirection="NoConversion" DataType="DINT" />
  <LocalVars>
    <Variable Name="procsetsAna" DataType="DINT" InitialValue="" Comment="" Address="" Modifier="Constant" Kind="VarOutput" Alias="" AccessRights="Write" StringSize="0" Direction="Output" CommentFields="" Attributes="23825" />
    <Variable Name="_bRes" DataType="BOOL" InitialValue="" Comment="" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="i" DataType="DINT" InitialValue="" Comment="Счётчик" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
  </LocalVars>
  <PouBody><![CDATA[FUNCTION procmessAna
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Name                Data Type      Dimension            Direction  Attribute       Comment                         *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* procsetsAna         BOOL                                VarOutput  Write           Результат выполнения функции *)
(* ------------------------------------------------------------------------------------------------------------------ *)
procsetsAna:= sAna.iSize;
if sAna.iSize>sAna.iMax then procsetsAna:= -sAna.iSize; return; end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проход по всем параметрам *)
i:= 1;   while i<=sAna.iSize do
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Отключение резевных объектов *)
if not dAna[i].nLogicNot then
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача в Рабочий объект *)
  iAna:= dAna[i];
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение уставок *)
  if iAna.nSetsRead then
    dSetsData[sAna.Idn].Data[i, 01] := ANY_TO_REAL (iAna.tCurrHi);                        (* Значение входа. Верхний предел <мА> *)
    dSetsData[sAna.Idn].Data[i, 02] := ANY_TO_REAL (iAna.tCurrLow);                       (* Значение входа. Нижний предел <мА> *)
    dSetsData[sAna.Idn].Data[i, 03] := ANY_TO_REAL (iAna.tCurrExt);                       (* Значение входа. Расширение предела <мА> *)
    dSetsData[sAna.Idn].Data[i, 04] :=              iAna.tHLm;                            (* Верхний инженерный диапазон <Unit> *)
    dSetsData[sAna.Idn].Data[i, 05] :=              iAna.tHH1;                            (* Верхний Аварийный (HH1) <Unit> *)
    dSetsData[sAna.Idn].Data[i, 06] :=              iAna.tHH;                             (* Верхний Аварийный (HH) <Unit> *)
    dSetsData[sAna.Idn].Data[i, 07] :=              iAna.tH1;                             (* Верхний Предупредительный (H1) <Unit> *)
    dSetsData[sAna.Idn].Data[i, 08] :=              iAna.tH;                              (* Верхний Предупредительный (H) <Unit> *)
    dSetsData[sAna.Idn].Data[i, 09] :=              iAna.tL;                              (* Нижний Предупредительный (L) <Unit> *)
    dSetsData[sAna.Idn].Data[i, 10] :=              iAna.tL1;                             (* Нижний Предупредительный (L1) <Unit> *)
    dSetsData[sAna.Idn].Data[i, 11] :=              iAna.tLL;                             (* Нижний Аварийный (LL) <Unit> *)
    dSetsData[sAna.Idn].Data[i, 12] :=              iAna.tLL1;                            (* Нижний Аварийный (LL1) <Unit> *)
    dSetsData[sAna.Idn].Data[i, 13] :=              iAna.tLLm;                            (* Нижний инженерный диапазон <Unit> *)
    dSetsData[sAna.Idn].Data[i, 14] :=              iAna.tHist;                           (* Гистерезис <Unit> *)
    dSetsData[sAna.Idn].Data[i, 15] := ANY_TO_REAL (iAna.tTimer1)/10.0;                   (* Т01 Фильтрация дребезга <сек.> *)
    dSetsData[sAna.Idn].Data[i, 16] := ANY_TO_REAL (iAna.tEnableSet);                     (* Флаги включения уставок *)
    dSetsData[sAna.Idn].Data[i, 17] := ANY_TO_REAL (iAna.tCurrDiff);                      (* Рассогл. каналов тока <%> *)
    dSetsData[sAna.Idn].Data[i, 18] := ANY_TO_REAL (iAna.tTimer11)/10.0;                  (* Т11 Фильтр рассогл. каналов тока <сек.> *)
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Запись уставок *)
  if iAna.nSetsWrite then
    iAna.tCurrHi                    := ANY_TO_WORD (dSetsData[sAna.Idn].Data[i, 01]);     (* Значение входа. Верхний предел <мА> *)
    iAna.tCurrLow                   := ANY_TO_WORD (dSetsData[sAna.Idn].Data[i, 02]);     (* Значение входа. Нижний предел <мА> *)
    iAna.tCurrExt                   := ANY_TO_WORD (dSetsData[sAna.Idn].Data[i, 03]);     (* Значение входа. Расширение предела <мА> *)
    iAna.tHLm                       :=              dSetsData[sAna.Idn].Data[i, 04];      (* Верхний инженерный диапазон <Unit> *)
    iAna.tHH1                       :=              dSetsData[sAna.Idn].Data[i, 05];      (* Верхний Аварийный (HH1) <Unit> *)
    iAna.tHH                        :=              dSetsData[sAna.Idn].Data[i, 06];      (* Верхний Аварийный (HH) <Unit> *)
    iAna.tH1                        :=              dSetsData[sAna.Idn].Data[i, 07];      (* Верхний Предупредительный (H1) <Unit> *)
    iAna.tH                         :=              dSetsData[sAna.Idn].Data[i, 08];      (* Верхний Предупредительный (H) <Unit> *)
    iAna.tL                         :=              dSetsData[sAna.Idn].Data[i, 09];      (* Нижний Предупредительный (L) <Unit> *)
    iAna.tL1                        :=              dSetsData[sAna.Idn].Data[i, 10];      (* Нижний Предупредительный (L1) <Unit> *)
    iAna.tLL                        :=              dSetsData[sAna.Idn].Data[i, 11];      (* Нижний Аварийный (LL) <Unit> *)
    iAna.tLL1                       :=              dSetsData[sAna.Idn].Data[i, 12];      (* Нижний Аварийный (LL1) <Unit> *)
    iAna.tLLm                       :=              dSetsData[sAna.Idn].Data[i, 13];      (* Нижний инженерный диапазон <Unit> *)
    iAna.tHist                      :=              dSetsData[sAna.Idn].Data[i, 14];      (* Гистерезис <Unit> *)
    iAna.tTimer1                    := ANY_TO_WORD (dSetsData[sAna.Idn].Data[i, 15]*10.0);(* Т01 Фильтрация дребезга <сек.> *)
    iAna.tEnableSet                 := ANY_TO_DWORD(dSetsData[sAna.Idn].Data[i, 16]);     (* Флаги включения уставок *)
    iAna.tCurrDiff                  := ANY_TO_WORD (dSetsData[sAna.Idn].Data[i, 17]);     (* Рассогл. каналов тока <%> *)
    iAna.tTimer11                   := ANY_TO_WORD (dSetsData[sAna.Idn].Data[i, 18]*10.0);(* Т11 Фильтр рассогл. каналов тока <сек.> *)
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача из Рабочего объекта *)
  dAna[i]:= iAna;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Отключение резевных объектов *)
end_if;
i:= i+1; end_while;
END_FUNCTION
]]></PouBody>
  <PouUIProperties>
    <Root Version="7">
  <LanguageContainerStyle CommentTextColor="Green" CommentFont="Courier New, 10pt" PonctuationTextColor="Black" PonctuationFont="Courier New, 10pt" IdentifierTextColor="Black" IdentifierFont="Courier New, 10pt" OperatorTextColor="Black" OperatorFont="Courier New, 10pt" ReservedWordTextColor="Fuchsia" ReservedWordFont="Courier New, 10pt" PouTextColor="BlueViolet" PouFont="Courier New, 10pt" NumberTextColor="Firebrick" NumberFont="Courier New, 10pt" StringTextColor="Gray" StringFont="Courier New, 10pt" EditorTextAreaBackgroundColor="White" EditorFont="Courier New, 10pt" Index="0" />
</Root>
  </PouUIProperties>
</Pou>