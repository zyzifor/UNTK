FUNCTION processDtTm
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Name            Data Type      Dimension            Direction  Attribute       Comment                             *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* processDtTm    DINT                                VarOutput  Write           Результат выполнения функции *)
(* iDtTm           typDtTm                             Var        Read/Write      Рабочий объект *)
(* i               DINT                                Var        Read/Write      Счётчик *)
(* _bRes           BOOL                                Var        Read/Write      Результат функции BOOL *)
(* _dRes           DINT                                Var        Read/Write      Результат функции DINT *)
(* ------------------------------------------------------------------------------------------------------------------ *)
processDtTm:= sDtTm.iSize;
if sDtTm.iSize>sDtTm.iMax then processDtTm:= -sDtTm.iSize; return; end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проход по всем параметрам *)
i:= 1;   while i<=sDtTm.iSize do
(* Передача в Рабочий объект *)
  iDtTm:= dDtTm[i];
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Сохраняемые переменные (чтение при первом скане) *)
  if iPrgModify then
    iDtTm.CntPrgChange  := rDtTm[i].CntPrgChange;                (* Программа ПЛК. Изменение программы. Счётчик *)
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Начало логики *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* MSec	Скан контроллера (сек) *)
  iDtTm.i2000MSec:= ANY_TO_LREAL(iDtTm.xNowTime.sec_2000)+ANY_TO_LREAL(iDtTm.xNowTime.usec)*0.000001;
  if iDtTm.o2000MSec>=iDtTm.i2000MSec or iDtTm.o2000MSec=0.0 then
    iDtTm.MSec:= 0.0;
  else
    iDtTm.MSec:= ANY_TO_REAL(iDtTm.i2000MSec-iDtTm.o2000MSec);
  end_if;
  iDtTm.o2000MSec:= iDtTm.i2000MSec;
(* ------------------------------------------------------ *)
(* Преобразование текущих даты/времени *)
  _strDT:= GET_TIME_STRING(iDtTm.xNowTime.sec_unix-18000, iDtTm.xNowTime.usec);
(* ------------------------------------------------------ *)
(* Oper	Код операции (0: пост. чтение; 1: заполн. данных; 2: установка даты/времени) *)
  case iDtTm.Oper of 
    1: (* заполн. данных *);
	2: (* установка даты/времени *)
	    _bres:= SetDateTime(ANY_TO_DINT(iDtTm.Year), ANY_TO_DINT(iDtTm.Month), ANY_TO_DINT(iDtTm.Day),	               
	                        ANY_TO_DINT(iDtTm.Hour), ANY_TO_DINT(iDtTm.Min),   ANY_TO_DINT(iDtTm.Sec)); 
		iDtTm.Oper:= 0; if not _bres then iDtTm.Oper:= -1; end_if; 					
  else 
    iDtTm.Year := ANY_TO_INT(MID(_strDT, 4,  1));
    iDtTm.Month:= ANY_TO_INT(MID(_strDT, 2,  6));
    iDtTm.Day  := ANY_TO_INT(MID(_strDT, 2,  9));
    iDtTm.Hour := ANY_TO_INT(MID(_strDT, 4, 12));
    iDtTm.Min  := ANY_TO_INT(MID(_strDT, 2, 15));
    iDtTm.Sec  := ANY_TO_INT(MID(_strDT, 2, 18));
  end_case; 
(* ------------------------------------------------------ *)
(* Тик секунды *)
  if iDtTm.Sec>=dDtTm[i].Sec then 
    iDtTm.BlkSec:= iDtTm.Sec-dDtTm[i].Sec; 
  else 
    iDtTm.BlkSec:= 60-dDtTm[i].Sec+iDtTm.Sec; 
  end_if;
(* ------------------------------------------------------ *)
(* Упаковка *)
  iDtTm.pYr  := ANY_TO_WORD(iDtTm.Year); 
  iDtTm.pMhDy:= ANY_TO_WORD(iDtTm.Month*100 +iDtTm.Day);
  iDtTm.pHrMn:= ANY_TO_WORD(iDtTm.Hour *100 +iDtTm.Min);
  iDtTm.pScMS:= ANY_TO_WORD(iDtTm.Sec  *1000+ANY_TO_INT(iDtTm.xNowTime.msec));
(* ------------------------------------------------------ *)
(* ПЛК: Состояние резервирования *)
  (* Основной *)
  iDtTm.PLCState:= 0;
  if iDtTm.nDioCPUM>0 and iDtTm.nDioCPUM<=sDioCPU.iSize then ;
    iDtTm.PLCState.0:= dDioCPU[iDtTm.nDioCPUM].sMain or dDioCPU[iDtTm.nDioCPUM].sRes; 
    iDtTm.PLCState.1:= dDioCPU[iDtTm.nDioCPUM].sMain;
  end_if;
  (* Резерный *)
  if iDtTm.nDioCPUR>0 and iDtTm.nDioCPUR<=sDioCPU.iSize then 
    iDtTm.PLCState.2:= dDioCPU[iDtTm.nDioCPUR].sMain or dDioCPU[iDtTm.nDioCPUR].sRes;
    iDtTm.PLCState.3:= dDioCPU[iDtTm.nDioCPUR].sMain;
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Программа ПЛК. Полная перегагрузка *)
  iDtTm.sPrgModify:= iDtTm.xSysInfo.Cycle.CycleCounter<=1;
  if iDtTm.sPrgModify then
    iDtTm.DatePrgModify:= ANY_TO_DWORD(
      ANY_TO_DINT(iDtTm.Day)*1000000+
	  ANY_TO_DINT(iDtTm.Month)*10000+
	  ANY_TO_DINT(iDtTm.Year));
    iDtTm.TimePrgModify:= ANY_TO_DWORD(
      ANY_TO_DINT(iDtTm.Hour)*10000+
	  ANY_TO_DINT(iDtTm.Min)*100+
	  ANY_TO_DINT(iDtTm.Sec));
   end_if;
(* Программа ПЛК. Полная перегагрузка (Ручной режим) *)
   iDtTm.sPrgModify:= iDtTm.sPrgModify or iDtTm.cPrgModify;
(* Программа ПЛК. Изменение программы *)
  iDtTm.sPrgChange:= ANY_TO_DINT(iDtTm.xSysInfo.ResInfo.OnlineChangeCnt)<>iDtTm.CntPrgChange or iDtTm.sPrgModify;
  iDtTm.CntPrgChange:= ANY_TO_DINT(iDtTm.xSysInfo.ResInfo.OnlineChangeCnt);
  if iDtTm.sPrgChange then
    iDtTm.DatePrgChange:= ANY_TO_DWORD(
      ANY_TO_DINT(iDtTm.Day)*1000000+
	  ANY_TO_DINT(iDtTm.Month)*10000+
	  ANY_TO_DINT(iDtTm.Year));
    iDtTm.TimePrgChange:= ANY_TO_DWORD(
      ANY_TO_DINT(iDtTm.Hour)*10000+
	  ANY_TO_DINT(iDtTm.Min)*100+
	  ANY_TO_DINT(iDtTm.Sec));
   end_if;	  
(* Программа ПЛК. Изменение программы (Ручной режим) *)
   iDtTm.sPrgChange:= iDtTm.sPrgChange or iDtTm.cPrgChange;
(* Сброс команд Ручного режима *)
   iDtTm.cPrgModify:= false;
   iDtTm.cPrgChange:= false;
(* ------------------------------------------------------------------------------------------------------------------ *) 
(* Конец логики *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Сохраняемые переменные (сохранение данных) *)
  rDtTm[i].CntPrgChange :=   iDtTm.CntPrgChange;                 (* Программа ПЛК. Изменение программы. Счётчик *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача из Рабочего объекта *)
  dDtTm[i]:= iDtTm;
i:= i+1; end_while;

END_FUNCTION