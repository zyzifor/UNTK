FUNCTION procmessMot
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Name                Data Type      Dimension            Direction  Attribute       Comment                         *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* procsetsMot         BOOL                                VarOutput  Write           Результат выполнения функции *)
(* ------------------------------------------------------------------------------------------------------------------ *)
procsetsMot:= sMot.iSize;
if sMot.iSize>sMot.iMax then procsetsMot:= -sMot.iSize; return; end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проход по всем параметрам *)
i:= 1;   while i<=sMot.iSize do
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Отключение резевных объектов *)
if not dMot[i].nLogicNot then
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача в Рабочий объект *)
  iMot:= dMot[i];
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение уставок *)
  if iMot.nSetsRead then
    dSetsData[sMot.Idn].Data[i, 01] := ANY_TO_REAL (iMot.tTimer1)/10.0;                   (* Т01 Срабатывание эл. цепей <сек.> *)
    dSetsData[sMot.Idn].Data[i, 02] := ANY_TO_REAL (iMot.tTimer2)/10.0;                   (* Т02 Выход на Рабочий режим <сек.> *)
    dSetsData[sMot.Idn].Data[i, 03] := ANY_TO_REAL (iMot.tTimer3)/10.0;                   (* Т03 Контроль Рабочего режима в работе <сек.> *)
    dSetsData[sMot.Idn].Data[i, 04] := ANY_TO_REAL (iMot.tTimer11)/10.0;                  (* Т11 Авт. управл. оборуд. на входе <сек.> *)
    dSetsData[sMot.Idn].Data[i, 05] := ANY_TO_REAL (iMot.tTimer12)/10.0;                  (* Т12 Авт. управл. оборуд. на выходе <сек.> *)
    dSetsData[sMot.Idn].Data[i, 06] := ANY_TO_REAL (iMot.tEnableSet);                     (* Флаги включения уставок *)
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Запись уставок *)
  if iMot.nSetsWrite then
    iMot.tTimer1                    := ANY_TO_WORD (dSetsData[sMot.Idn].Data[i, 01]*10.0);(* Т01 Срабатывание эл. цепей <сек.> *)
    iMot.tTimer2                    := ANY_TO_WORD (dSetsData[sMot.Idn].Data[i, 02]*10.0);(* Т02 Выход на Рабочий режим <сек.> *)
    iMot.tTimer3                    := ANY_TO_WORD (dSetsData[sMot.Idn].Data[i, 03]*10.0);(* Т03 Контроль Рабочего режима в работе <сек.> *)
    iMot.tTimer11                   := ANY_TO_WORD (dSetsData[sMot.Idn].Data[i, 04]*10.0);(* Т11 Авт. управл. оборуд. на входе <сек.> *)
    iMot.tTimer12                   := ANY_TO_WORD (dSetsData[sMot.Idn].Data[i, 05]*10.0);(* Т12 Авт. управл. оборуд. на выходе <сек.> *)
    iMot.tEnableSet                 := ANY_TO_WORD (dSetsData[sMot.Idn].Data[i, 06]);     (* Флаги включения уставок *)
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача из Рабочего объекта *)
  dMot[i]:= iMot;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Отключение резевных объектов *)
end_if;
i:= i+1; end_while;
END_FUNCTION
