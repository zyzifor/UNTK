<?xml version="1.0" encoding="utf-8"?>
<Pou FileVersion="200.00.003" Name="prociombDmb" ElementGuid="4f020bd2-0a93-4ae7-bd4e-3fe78153e7c5" Comment="" SingleTextLine="Обмен Modbus Dio" Language="ST" CustomFbd="0" Localization="Prj" GroupName="(User defined)" GenDebugInfo="false" UseResPassword="true" GenerateSymbMon="true" Is1499="false">
  <Function IdentifierNb="0" Keyword="" ConvDirection="NoConversion" DataType="DINT" />
  <LocalVars>
    <Variable Name="prociombDmb" DataType="DINT" InitialValue="" Comment="" Address="" Modifier="Constant" Kind="VarOutput" Alias="" AccessRights="Write" StringSize="0" Direction="Output" CommentFields="" Attributes="23825" />
    <Variable Name="nWr" DataType="BOOL" InitialValue="" Comment="true - Запись из Modbus в ПЛК/false - чтение из ПЛК в Modbus" Address="" Modifier="Constant" Kind="VarInput" Alias="" AccessRights="Read" StringSize="0" Direction="Input" CommentFields="" Attributes="0" />
    <Variable Name="i" DataType="DINT" InitialValue="" Comment="Счётчик" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_bRes" DataType="BOOL" InitialValue="" Comment="Результат функции BOOL" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_iRes" DataType="INT" InitialValue="" Comment="" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="n" DataType="DINT" InitialValue="" Comment="Номер в массиве iodMBP_4x[m].regs[n]" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="j" DataType="DINT" InitialValue="" Comment="Счётчик" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="m" DataType="DINT" InitialValue="" Comment="Номер в массиве iodMBP_4x[m].regs[n]" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="iData" DataType="WORD" InitialValue="" Comment="Массив промежуточных данных" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="">
      <Dimension Lower="0" Upper="1" />
      <Dimension Lower="0" Upper="99" />
    </Variable>
    <Variable Name="_dRes" DataType="DINT" InitialValue="" Comment="Результат функции DINT" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
  </LocalVars>
  <PouBody><![CDATA[FUNCTION prociombDmb
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Name                Data Type      Dimension            Direction  Attribute       Comment                         *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* prociombDmb         BOOL                                VarOutput  Write           Результат выполнения функции *)
(* nWr                 BOOL                                VarInput   Read            true - Запись из Modbus в ПЛК/false - чтение из ПЛК в Modbus *)
(* iData               WORD          [0...0,0...99]        Var        Read/Write      Массив промежуточных данных *)
(* iWord               WORD          [0...1]               Var        Read/Write      Массив промежуточных данных WORD *)
(* iReal               REAL          [0...0]               Var        Read/Write      Массив промежуточных данных REAL *)
(* j                   DINT                                Var        Read/Write      Счётчик *)
(* m                   DINT                                Var        Read/Write      Номер в массиве iodMBP_4x[m].regs[n] *)
(* n                   DINT                                Var        Read/Write      Номер в массиве iodMBP_4x[m].regs[n] *)
(* ------------------------------------------------------------------------------------------------------------------ *)
prociombDmb:= sDmb.iSize;
if sDmb.iSize>sDmb.iMax then prociombDmb:= -sDmb.iSize; return; end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проход по всем параметрам *)
i:= 1;   while i<=sDmb.iSize do
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача в Рабочий объект *)
  iDmb:= dDmb[i];
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проверка *)
  if sDmb.mbSize<=0 or
     mbDmb[i, 0]<0 or mbDmb[i, 0]>64 or mbDmb[i, 1]<1 or mbDmb[i, 1]>1024 then
     prociombDmb:= -2;
  end_if;
  (* Считывание настроечных данных *)
  m:= ANY_TO_DINT(mbDmb[i, 0]); n:= ANY_TO_DINT(mbDmb[i, 1]);
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение данных из Modbus в ПЛК *)
  if nWr Then
    iDmb.wrCRC:= CRC16ForModbusRegs(iodMBP_4x, m, n, sDmb.mbSize);
    if iDmb.wrCRC<>iDmb.rdCRC then
      iDmb.wrCount:= iDmb.wrCount+1; if iDmb.wrCount>1000000 then iDmb.wrCount:= 1; end_if;
      _dRes:= SafeCopyFromModbusREGsArray(iodMBP_4x, iData, m, n, 0, 0, sDmb.mbSize);
  (* ----------------------------------------------------------- *)
      iDmb.CommCode     :=             iData[0,    2];                                     (* Код команды *)   
  (* ----------------------------------------------------------- *)
  j:= 0;   while j<=31 do
      iDmb.RawData[j]   :=             iData[0, j+ 7];                                     (* Данные (сырые) *)
  j:= j+1; end_while;
  (* ----------------------------------------------------------- *)
      iDmb.MsAck_State  :=             iData[0,   39];                                     (* Состояние (Подтверждение) *)
    end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение данных из Modbus в ПЛК *)
  else
    iDmb.State.0      := iDmb.sOk;                                                       (* В норме *)       
    iDmb.State.1      := iDmb.iEmp01;                                                    (* Резерв *)        
    iDmb.State.2      := iDmb.eNotLink;                                                  (* Нет связи *)     
    iDmb.State.3      := iDmb.eErrLink;                                                  (* Есть ошибки обмена *)
    iDmb.State.4      := iDmb.nSlave;                                                    (* Slave *)         
    iDmb.State.5      := iDmb.eNotMK541N;                                                (* MK541N не существует *)
    iDmb.State.6      := iDmb.iEmp06;                                                    (* Резерв *)        
    iDmb.State.7      := iDmb.iEmp07;                                                    (* Резерв *)        
    iDmb.State.8      := iDmb.nSwapWORD_M0;                                              (* Виртуальный модуль 0: WORD в обратном порядке *)
    iDmb.State.9      := iDmb.nSwapWORD_M1;                                              (* Виртуальный модуль 1: WORD в обратном порядке *)
    iDmb.State.10     := iDmb.nSwapWORD_M2;                                              (* Виртуальный модуль 2: WORD в обратном порядке *)
    iDmb.State.11     := iDmb.nSwapWORD_M3;                                              (* Виртуальный модуль 3: WORD в обратном порядке *)
    iDmb.State.12     := iDmb.nSwapWORD_M4;                                              (* Виртуальный модуль 4: WORD в обратном порядке *)
    iDmb.State.13     := iDmb.nSwapWORD_M5;                                              (* Виртуальный модуль 5: WORD в обратном порядке *)
    iDmb.State.14     := iDmb.nSwapWORD_M6;                                              (* Виртуальный модуль 6: WORD в обратном порядке *)
    iDmb.State.15     := iDmb.nSwapWORD_M7;                                              (* Виртуальный модуль 7: WORD в обратном порядке *)
    iDmb.State.16     := iDmb.sTest_M0;                                                  (* Режим: Тестирование Модуль [0] *)
    iDmb.State.17     := iDmb.sTest_M1;                                                  (* Режим: Тестирование Модуль [1] *)
    iDmb.State.18     := iDmb.sTest_M2;                                                  (* Режим: Тестирование Модуль [2] *)
    iDmb.State.19     := iDmb.sTest_M3;                                                  (* Режим: Тестирование Модуль [3] *)
    iDmb.State.20     := iDmb.sTest_M4;                                                  (* Режим: Тестирование Модуль [4] *)
    iDmb.State.21     := iDmb.sTest_M5;                                                  (* Режим: Тестирование Модуль [5] *)
    iDmb.State.22     := iDmb.sTest_M6;                                                  (* Режим: Тестирование Модуль [6] *)
    iDmb.State.23     := iDmb.sTest_M7;                                                  (* Режим: Тестирование Модуль [7] *)
  (* ----------------------------------------------------------- *)
    iData[0,    0]    := GetWordFromDWord(iDmb.State, 0);                                (* Состояние Low Word *)
    iData[0,    1]    := GetWordFromDWord(iDmb.State, 1);                                (* Состояние Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,    2]    :=             iDmb.CommCode;                                      (* Код команды *)   
  (* ----------------------------------------------------------- *)
  j:= 0;   while j<=3 do
    iData[0,    3+j]    :=             iDmb.ErrCode[j];                                     (* Виртуальные модули: Коды ошибок *)
  j:= j+1; end_while;
  (* ----------------------------------------------------------- *)
  j:= 0;   while j<=31 do
    iData[0,    7+j]    :=             iDmb.RawData[j];                                     (* Данные (сырые) *)
  j:= j+1; end_while;
  (* ----------------------------------------------------------- *)
    iData[0,   39]    :=             iDmb.MsAck_State;                                   (* Состояние (Подтверждение) *)
(* ------------------------------------------------------------------------------------------------------------------ *)
    _dRes:= SafeCopyToModbusREGsArray(iData, iodMBP_4x, 0, 0, m, n, sDmb.mbSize);
    iDmb.rdCRC:= CRC16ForModbusRegs(iodMBP_4x, m, n, sDmb.mbSize);
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача из Рабочего объекта *)
  dDmb[i]:= iDmb;
i:= i+1; end_while;
END_FUNCTION]]></PouBody>
  <PouUIProperties>
    <Root Version="7">
  <LanguageContainerStyle CommentTextColor="Green" CommentFont="Courier New, 10pt" PonctuationTextColor="Black" PonctuationFont="Courier New, 10pt" IdentifierTextColor="Black" IdentifierFont="Courier New, 10pt" OperatorTextColor="Black" OperatorFont="Courier New, 10pt" ReservedWordTextColor="Fuchsia" ReservedWordFont="Courier New, 10pt" PouTextColor="BlueViolet" PouFont="Courier New, 10pt" NumberTextColor="Firebrick" NumberFont="Courier New, 10pt" StringTextColor="Gray" StringFont="Courier New, 10pt" EditorTextAreaBackgroundColor="White" EditorFont="Courier New, 10pt" Index="0" />
</Root>
  </PouUIProperties>
</Pou>