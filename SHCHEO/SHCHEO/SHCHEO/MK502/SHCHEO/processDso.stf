FUNCTION processDso
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Name                Data Type      Dimension            Direction  Attribute       Comment                         *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* processDso          DINT                                VarOutput  Write           Результат выполнения функции *)
(* iPrgModify          BOOL                                VarInput   Read            Флаг полной перезагрузки программы ПЛК *)
(* i                   DINT                                Var        Read/Write      Счётчик *)
(* _bRes               BOOL                                Var        Read/Write      Результат функции BOOL *)
(* _dRes               DINT                                Var        Read/Write      Результат функции DINT *)
(* ------------------------------------------------------------------------------------------------------------------ *)
processDso:= sDso.iSize;
if sDso.iSize>sDso.iMax then processDso:= -sDso.iSize; return; end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проход по всем параметрам *)
i:= 1;   while i<=sDso.iSize do
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Отключение резевных объектов *)
if not dDso[i].nLogicNot then
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача в Рабочий объект *)
  iDso:= dDso[i];
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Сохраняемые переменные (чтение при первом скане) *)
  if iPrgModify then
    iDso.sOn            := rDso[i].sOn;                          (* Включен *)       
    iDso.sMask          := rDso[i].sMask;                        (* Режим Ремонт *)  
    iDso.sImit          := rDso[i].sImit;                        (* Имитация установлена *)
  end_if;
  iDso.MsAck_State:= ANY_TO_WORD(cInit);
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Начало логики *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Имитация *)    
  iDso.sImit:= (iDso.sImit or iDso.cImitOn) & not iDso.cImitOff;
(* Маскирование *)    
  iDso.sMask:= (iDso.sMask or iDso.cMaskOn) & not iDso.cMaskOff;
(* ---------------------------------------------------------------*)
(* Автоматическое Управление по таймеру *)
  iDso.cOffAuto:= iDso.cOffAuto or (iDso.tTimer1>0 & iDso.mTimer1=-1.0);
(* Режим в РАБОТЕ Отключен. Для удалённой Dso *)
  iDso.sModeOff:= (iDso.sModeOff or iDso.cModeOff) & not iDso.cModeOn;
(* ---------------------------------------------------------------*)
(* Команды. С учётом режима sModeOff *)
  iDso.cOnSafe := iDso.cOnSafe  or (iDso.cOnSafeMode  & not iDso.sModeOff);
  iDso.cOffSafe:= iDso.cOffSafe or (iDso.cOffSafeMode & not iDso.sModeOff);

(* ---------------------------------------------------------------*)
(* Управление *)
  iDso.sOn := ((iDso.sOn & not iDso.cOffOper & not iDso.cOffAuto & not iDso.cOffSafe) or 
               (iDso.cOnOper or iDso.cOnAuto or iDso.cOnSafe)) & not iDso.sMask;
  iDso.sOff:= not iDso.sOn;
(* Блокировки управления*)
  iDso.fOnMsk := iDso.sOn;
  iDso.fOffMsk:= iDso.sOff;
(* Изменилось состояние *)
  iDso.fCh:= (iDso.sOn xor dDso[i].sOn) or (iDso.sOff xor dDso[i].sOff);
(*-------------------------------------------------------*)
(* Команды в безопасном режиме *)
  if iDso.cOnSafe or iDso.cOffSafe then iDso.fSafe:= true;  end_if; 
  if iDso.MsAck_State<>0 then           iDso.fSafe:= false; end_if;
(*-------------------------------------------------------*)
(* Сигнализация по классам *) 
  if iDso.nClass=0 then iDso.nClass:= 16#4000; end_if;
  iDso.sOn1:= (iDso.nClass = 16#8000 or iDso.nClass = 16#4000) & iDso.sOn;         (* Alarm  *)
  iDso.sOn2:= (iDso.nClass = 16#2000 or iDso.nClass = 16#1000) & iDso.sOn;         (* Warning *)
  iDso.sOn3:= (iDso.nClass = 16#0800 or iDso.nClass = 16#0400) & iDso.sOn;         (* Norm *)
  iDso.sOn4:= (iDso.nClass = 16#0100) & iDso.sOn;                                  (* PLC Process Control Error*)
  iDso.sOn6:= (iDso.nClass = 16#0200) & iDso.sOn;                                  (* PLC Process Control Fault *)
  iDso.sOn5:= (iDso.nClass = 16#0040) & iDso.sOn;  
  (*iDso.nClass:= 16#0000;*)
(* ---------------------------------------------------- *)
(* Таймеры *)
  (* Т01 Импульс *)
  iDso.mTimer1:= _fTimer(
         Start:= iDso.sOn,
          Stop:= iDso.cOffOper or iDso.cOffAuto or iDso.cOffSafe,
        tTimer:= _tTimer(iDso.tTimer1),
        mTimer:= iDso.mTimer1);
  (* Т02 Мигание *)
  iDso.mTimer2:= _fTimer(
         Start:= iDso.sOn,
          Stop:= not iDso.sOn,
        tTimer:= _tTimer(iDso.tTimer2),
        mTimer:= iDso.mTimer2);
(* ---------------------------------------------------------------*)
(* Команды *)
  if iDso.tTimer2=0 then
    iDso.lOn:= iDso.sOn;
  elsif iDso.sOn then
    if iDso.mTimer2=-1.0 then iDso.lOn:= not iDso.lOn; end_if;
  elsif iDso.sOff then
	iDso.lOn:= false;
  end_if;
  if iDso.nInvert   then iDso.lOn:= not iDso.sOn; end_if; 
  if not iDso.sImit then iDso.yOn := iDso.lOn;    end_if; 
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Конец логики *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Сохраняемые переменные (сохранение данных) *)
  rDso[i].sOn           :=   iDso.sOn;                           (* Включен *)       
  rDso[i].sMask         :=   iDso.sMask;                         (* Режим Ремонт *)  
  rDso[i].sImit         :=   iDso.sImit;                         (* Имитация установлена *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Упаковка сообщений для команд *)
  iDso.Command.0        := iDso.cImitOn;                         (* Команда оператора. Режим имитации Включить *)
  iDso.Command.1        := iDso.cImitOff;                        (* Команда оператора. Режим имитации Отключить *)
  iDso.Command.2        := iDso.cMaskOn;                         (* Команда оператора. Режим Ремонт Включить *)
  iDso.Command.3        := iDso.cMaskOff;                        (* Команда оператора. Режим Ремонт Отключить *)
  iDso.Command.4        := iDso.cOnOper;                         (* Команда оператора. Включить *)
  iDso.Command.5        := iDso.cOffOper;                        (* Команда оператора. Отключить *)
  iDso.Command.6        := iDso.cOnAuto;                         (* Команда Автоматическая. Включить *)
  iDso.Command.7        := iDso.cOffAuto;                        (* Команда Автоматическая. Отключить *)
  iDso.Command.8        := iDso.cOnSafe;                         (* Команда Включить (Безопасный Режим) *)
  iDso.Command.9        := iDso.cOffSafe;                        (* Команда Отключить (Безопасный Режим) *)
  iDso.Command.10       := iDso.cModeOn;                         (* Включить наличие. Режим в РАБОТЕ *)
  iDso.Command.11       := iDso.cModeOff;                        (* Отключить наличие. Режим в РАБОТЕ *)
  iDso.Command.12       := iDso.cOnSafeMode;                     (* Команда Включить (Безопасный Режим). С учётом режима sModeOff *)
  iDso.Command.13       := iDso.cOffSafeMode;                    (* Команда Включить (Безопасный Режим). С учётом режима sModeOff *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Cообщения для команд *)
  if iDso.MsAck_State >iDso.oMsAck_State then iDso.MsEvt_Command:= 0;                  end_if;
  if iDso.Command    <>0                 then iDso.MsEvt_Command:= iDso.Command;       end_if;
  iDso.oMsAck_State:= iDso.MsAck_State;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Сброс команд *)
  iDso.Command:= 0;
  iDso.cImitOn          := false;                                (* Команда оператора. Режим имитации Включить *)
  iDso.cImitOff         := false;                                (* Команда оператора. Режим имитации Отключить *)
  iDso.cMaskOn          := false;                                (* Команда оператора. Режим Ремонт Включить *)
  iDso.cMaskOff         := false;                                (* Команда оператора. Режим Ремонт Отключить *)
  iDso.cOnOper          := false;                                (* Команда оператора. Включить *)
  iDso.cOffOper         := false;                                (* Команда оператора. Отключить *)
  iDso.cOnAuto          := false;                                (* Команда Автоматическая. Включить *)
  iDso.cOffAuto         := false;                                (* Команда Автоматическая. Отключить *)
  iDso.cOnSafe          := false;                                (* Команда Включить (Безопасный Режим) *)
  iDso.cOffSafe         := false;                                (* Команда Отключить (Безопасный Режим) *)
  iDso.cModeOn          := false;                                (* Включить наличие. Режим в РАБОТЕ *)
  iDso.cModeOff         := false;                                (* Отключить наличие. Режим в РАБОТЕ *)
  iDso.cOnSafeMode      := false;                                (* Команда Включить (Безопасный Режим). С учётом режима sModeOff *)
  iDso.cOffSafeMode     := false;                                (* Команда Включить (Безопасный Режим). С учётом режима sModeOff *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача из Рабочего объекта *)
  dDso[i]:= iDso;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Отключение резевных объектов *)
end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Отключение резервных объектов: Сброс состояния объекта *)
if dDso[i].nLogicNot & not dDso[i].oLogicNot then
  dDso[i].sOff          := false;                                (* Отключен *)      
  dDso[i].sOn           := false;                                (* Включен *)       
  dDso[i].sOn1          := false;                                (* Включен(а) *)    
  dDso[i].sOn2          := false;                                (* Включен(а) *)    
  dDso[i].sOn3          := false;                                (* Включен(а) *)    
  dDso[i].sOn4          := false;                                (* Включен(а) *)    
  dDso[i].sOn5          := false;                                (* Включен(а) *)    
  dDso[i].sOn6          := false;                                (* Включен(а) *)    
  dDso[i].sMask         := false;                                (* Режим Ремонт *)  
  dDso[i].sImit         := false;                                (* Имитация *)      
(* maskStateNone=1023 *)
end_if;
dDso[i].oLogicNot:= dDso[i].nLogicNot;
(* ------------------------------------------------------------------------------------------------------------------ *)
i:= i+1; end_while;

END_FUNCTION