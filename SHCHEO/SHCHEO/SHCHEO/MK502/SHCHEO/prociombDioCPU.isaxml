<?xml version="1.0" encoding="utf-8"?>
<Pou FileVersion="200.00.003" Name="prociombDioCPU" ElementGuid="86467ff4-95ba-405c-bf99-9c0f8d4c84bf" Comment="" SingleTextLine="Обмен Modbus Dio" Language="ST" CustomFbd="0" Localization="Prj" GroupName="(User defined)" GenDebugInfo="false" UseResPassword="true" GenerateSymbMon="true" Is1499="false">
  <Function IdentifierNb="0" Keyword="" ConvDirection="NoConversion" DataType="DINT" />
  <LocalVars>
    <Variable Name="prociombDioCPU" DataType="DINT" InitialValue="" Comment="" Address="" Modifier="Constant" Kind="VarOutput" Alias="" AccessRights="Write" StringSize="0" Direction="Output" CommentFields="" Attributes="23825" />
    <Variable Name="nWr" DataType="BOOL" InitialValue="" Comment="true - Запись из Modbus в ПЛК/false - чтение из ПЛК в Modbus" Address="" Modifier="Constant" Kind="VarInput" Alias="" AccessRights="Read" StringSize="0" Direction="Input" CommentFields="" Attributes="0" />
    <Variable Name="i" DataType="DINT" InitialValue="" Comment="Счётчик" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="iReal" DataType="REAL" InitialValue="" Comment="Массив промежуточных данных REAL" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="">
      <Dimension Lower="0" Upper="0" />
    </Variable>
    <Variable Name="_bRes" DataType="BOOL" InitialValue="" Comment="Результат функции BOOL" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_iRes" DataType="INT" InitialValue="" Comment="Результат функции INT" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="n" DataType="DINT" InitialValue="" Comment="Номер в массиве iodMBP_4x[m].regs[n]" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="iWord" DataType="WORD" InitialValue="" Comment="Массив промежуточных данных WORD" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="">
      <Dimension Lower="0" Upper="1" />
    </Variable>
    <Variable Name="j" DataType="DINT" InitialValue="" Comment="Счётчик" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="m" DataType="DINT" InitialValue="" Comment="Номер в массиве iodMBP_4x[m].regs[n]" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="iData" DataType="WORD" InitialValue="" Comment="Номер объекта" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="">
      <Dimension Lower="0" Upper="1" />
      <Dimension Lower="0" Upper="99" />
    </Variable>
    <Variable Name="_dRes" DataType="DINT" InitialValue="" Comment="Результат функции DINT" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
  </LocalVars>
  <PouBody><![CDATA[FUNCTION prociombDioCPU
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Name                Data Type      Dimension            Direction  Attribute       Comment                         *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* prociombDioCPU501_2 BOOL                                VarOutput  Write           Результат выполнения функции *)
(* nWr                 BOOL                                VarInput   Read            true - Запись из Modbus в ПЛК/false - чтение из ПЛК в Modbus *)
(* iData               WORD          [0...0,0...99]        Var        Read/Write      Массив промежуточных данных *)
(* iWord               WORD          [0...1]               Var        Read/Write      Массив промежуточных данных WORD *)
(* iReal               REAL          [0...0]               Var        Read/Write      Массив промежуточных данных REAL *)
(* j                   DINT                                Var        Read/Write      Счётчик *)
(* m                   DINT                                Var        Read/Write      Номер в массиве iodMBP_4x[m].regs[n] *)
(* n                   DINT                                Var        Read/Write      Номер в массиве iodMBP_4x[m].regs[n] *)
(* ------------------------------------------------------------------------------------------------------------------ *)
prociombDioCPU:= sDioCPU.iSize;
if sDioCPU.iSize>sDioCPU.iMax then prociombDioCPU:= -sDioCPU.iSize; return; end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проход по всем параметрам *)
i:= 1;   while i<=sDioCPU.iSize do
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача в Рабочий объект *)
  iDioCPU:= dDioCPU[i];
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проверка *)
  if sDioCPU.mbSize<=0 or
     mbDioCPU[i, 0]<0 or mbDioCPU[i, 0]>64 or mbDioCPU[i, 1]<1 or mbDioCPU[i, 1]>1024 then
     prociombDioCPU:= -2;
  end_if;
  (* Считывание настроечных данных *)
  m:= ANY_TO_DINT(mbDioCPU[i, 0]); n:= ANY_TO_DINT(mbDioCPU[i, 1]);
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение данных из Modbus в ПЛК *)
  if nWr Then
    iDioCPU.wrCRC:= CRC16ForModbusRegs(iodMBP_4x, m, n, sDioCPU.mbSize);
    if iDioCPU.wrCRC<>iDioCPU.rdCRC then
      iDioCPU.wrCount:= iDioCPU.wrCount+1; if iDioCPU.wrCount>1000000 then iDioCPU.wrCount:= 1; end_if;
      _dRes:= SafeCopyFromModbusREGsArray(iodMBP_4x, iData, m, n, 0, 0, sDioCPU.mbSize);
  (* ----------------------------------------------------------- *)
      iDioCPU.MsAck_State:=       iData[0,   24];                                     (* Состояние (Подтверждение) *)
    end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение данных из Modbus в ПЛК *)
  else
    iDioCPU.State.0:= iDioCPU.sMain;                                           (* В режиме Основной *)
    iDioCPU.State.1:= iDioCPU.sRes;                                            (* В режиме Резервный *)
    iDioCPU.State.2:= iDioCPU.eFOErr;                                          (* Ошибки Резервирования *)
    iDioCPU.State.3:= iDioCPU.eActOScan;                                       (* Превышено время скана *)
    iDioCPU.State.4:= iDioCPU.eActOLoad;                                       (* Загрузка ЦП больше 90% *)
    iDioCPU.State.5:= iDioCPU.sCRC32Ch;                                        (* Изменён CRC32 *) 
    iDioCPU.State.6:= iDioCPU.sPrgChange;                                      (* Программа ПЛК. Изменение программы *)
    iDioCPU.State.7:= iDioCPU.sPrgModify;                                      (* Программа ПЛК. Полная перегагрузка *)
    iDioCPU.State.8:= iDioCPU.blkFOErr;                                        (* Индикатор FOErr - мигает *)
    iDioCPU.State.9:= iDioCPU.ledFOErr;                                        (* Индикатор FOErr - горит *)
    iDioCPU.State.10:= iDioCPU.ledPrim;                                        (* Индикатор Prim - горит *)
    iDioCPU.State.11:= iDioCPU.blkPrim;                                        (* Индикатор Prim - мигает *)
    iDioCPU.State.12:= iDioCPU.ledAct;                                         (* Индикатор Act - горит *)
    iDioCPU.State.13:= iDioCPU.blkAct;                                         (* Индикатор Act - мигает *)
  (* ----------------------------------------------------------- *)
    iData[0,    0]    := GetWordFromDWord(iDioCPU.State, 0);                        (* Состояние Low Word *)
    iData[0,    1]    := GetWordFromDWord(iDioCPU.State, 1);                        (* Состояние Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,    2]    := ANY_TO_WORD(iDioCPU.CPULoad);                              (* Загрузка процессора <%>  (x100.0) *)
  (* ----------------------------------------------------------- *)
    iData[0,    3]    := ANY_TO_WORD(iDioCPU.CPUMemFree);                           (* Объём свободной памяти (МБ) *)
  (* ----------------------------------------------------------- *)
    iData[0,    4]    := ANY_TO_WORD(iDioCPU.ClcCurr);                              (* Скан программы <сек.> (x0.001) *)
  (* ----------------------------------------------------------- *)
    iData[0,    5]    := ANY_TO_WORD(iDioCPU.ClcMax);                               (* Максимальное время выполнения программы пользователя (мсек) *)
  (* ----------------------------------------------------------- *)
    iData[0,    6]    := GetWordFromDWord(ANY_TO_DWORD(iDioCPU.ClcOvfl), 0);        (* Число превышений заданного времени цикла Low Word *)
    iData[0,    7]    := GetWordFromDWord(ANY_TO_DWORD(iDioCPU.ClcOvfl), 1);        (* Число превышений заданного времени цикла Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,    8]    := GetWordFromDWord(ANY_TO_DWORD(iDioCPU.FOErrCode), 0);      (* Код ошибки Failover Low Word *)
    iData[0,    9]    := GetWordFromDWord(ANY_TO_DWORD(iDioCPU.FOErrCode), 1);      (* Код ошибки Failover Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   10]    := ANY_TO_WORD(iDioCPU.FOSync);                               (* Время синхронизации данных  <сек.> (x0.001) *)
  (* ----------------------------------------------------------- *)
    iData[0,   11]    := ANY_TO_WORD(iDioCPU.RsrMode);                              (* Режим выполнения ресурса *)
  (* ----------------------------------------------------------- *)
    iData[0,   12]    := GetWordFromDWord(iDioCPU.RsrCRC32, 0);                     (* CRC32 файлов ресурса в CPU Low Word *)
    iData[0,   13]    := GetWordFromDWord(iDioCPU.RsrCRC32, 1);                     (* CRC32 файлов ресурса в CPU Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   14]    := GetWordFromDWord(iDioCPU.DatePrgModify, 0);                (* Программа ПЛК. Полная перегагрузка. Дата Low Word *)
    iData[0,   15]    := GetWordFromDWord(iDioCPU.DatePrgModify, 1);                (* Программа ПЛК. Полная перегагрузка. Дата Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   16]    := GetWordFromDWord(iDioCPU.TimePrgModify, 0);                (* Программа ПЛК. Полная перегагрузка. Время Low Word *)
    iData[0,   17]    := GetWordFromDWord(iDioCPU.TimePrgModify, 1);                (* Программа ПЛК. Полная перегагрузка. Время Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   18]    := GetWordFromDWord(iDioCPU.DatePrgChange, 0);                (* Программа ПЛК. Изменение программы. Дата Low Word *)
    iData[0,   19]    := GetWordFromDWord(iDioCPU.DatePrgChange, 1);                (* Программа ПЛК. Изменение программы. Дата Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   20]    := GetWordFromDWord(iDioCPU.TimePrgChange, 0);                (* Программа ПЛК. Изменение программы. Время Low Word *)
    iData[0,   21]    := GetWordFromDWord(iDioCPU.TimePrgChange, 1);                (* Программа ПЛК. Изменение программы. Время Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   22]    := GetWordFromDWord(ANY_TO_DWORD(iDioCPU.CntPrgChange), 0);   (* Программа ПЛК. Изменение программы. Счётчик Low Word *)
    iData[0,   23]    := GetWordFromDWord(ANY_TO_DWORD(iDioCPU.CntPrgChange), 1);   (* Программа ПЛК. Изменение программы. Счётчик Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   24]    :=             iDioCPU.MsAck_State;                           (* Состояние (Подтверждение) *)
(* ------------------------------------------------------------------------------------------------------------------ *)
    _dRes:= SafeCopyToModbusREGsArray(iData, iodMBP_4x, 0, 0, m, n, sDioCPU.mbSize);
    iDioCPU.rdCRC:= CRC16ForModbusRegs(iodMBP_4x, m, n, sDioCPU.mbSize);
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача из Рабочего объекта *)
  dDioCPU[i]:= iDioCPU;
i:= i+1; end_while;
END_FUNCTION]]></PouBody>
  <PouUIProperties>
    <Root Version="7">
  <LanguageContainerStyle CommentTextColor="Green" CommentFont="Courier New, 10pt" PonctuationTextColor="Black" PonctuationFont="Courier New, 10pt" IdentifierTextColor="Black" IdentifierFont="Courier New, 10pt" OperatorTextColor="Black" OperatorFont="Courier New, 10pt" ReservedWordTextColor="Fuchsia" ReservedWordFont="Courier New, 10pt" PouTextColor="BlueViolet" PouFont="Courier New, 10pt" NumberTextColor="Firebrick" NumberFont="Courier New, 10pt" StringTextColor="Gray" StringFont="Courier New, 10pt" EditorTextAreaBackgroundColor="White" EditorFont="Courier New, 10pt" Index="0" />
</Root>
  </PouUIProperties>
</Pou>