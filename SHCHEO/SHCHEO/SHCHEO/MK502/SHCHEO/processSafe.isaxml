<?xml version="1.0" encoding="utf-8"?>
<Pou FileVersion="200.00.003" Name="processSafe" ElementGuid="69880f84-9ef6-4987-884b-52a436a3b400" Comment="" SingleTextLine="" Language="ST" CustomFbd="0" Localization="Prj" GroupName="(User defined)" GenDebugInfo="false" UseResPassword="true" GenerateSymbMon="true" Is1499="false">
  <Function IdentifierNb="0" Keyword="" ConvDirection="NoConversion" DataType="DINT" />
  <LocalVars>
    <Variable Name="processSafe" DataType="DINT" InitialValue="" Comment="Результат выполнения функции" Address="" Modifier="Constant" Kind="VarOutput" Alias="" AccessRights="Write" StringSize="0" Direction="Output" CommentFields="" Attributes="23825" />
    <Variable Name="iPrgModify" DataType="BOOL" InitialValue="" Comment="Полная перезагрузка ПЛК" Address="" Modifier="Constant" Kind="VarInput" Alias="" AccessRights="Read" StringSize="0" Direction="Input" CommentFields="" Attributes="0" />
    <Variable Name="i" DataType="DINT" InitialValue="" Comment="Счётчик" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="iDsoOn" DataType="BOOL" InitialValue="" Comment="Срабатывание" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="iDsoError" DataType="BOOL" InitialValue="" Comment="Дискретный параметр управления. Нет связи с удалённым ПЛК" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="tTimer" DataType="REAL" InitialValue="" Comment="Передаточная уставка таймера" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="oDsoOn" DataType="BOOL" InitialValue="" Comment="Срабатывание (предыдущее состояние)" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="sError" DataType="BOOL" InitialValue="" Comment="НЕИСПРАВНОСТЬ КОНТУРА КОМАНД" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_dRes" DataType="DINT" InitialValue="" Comment="Результат функции DINT" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="n" DataType="DINT" InitialValue="" Comment="Номер рабочего объекта" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="j" DataType="DINT" InitialValue="" Comment="Счётчик" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_bRes" DataType="BOOL" InitialValue="" Comment=" Результат функции BOOL" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="iTimer" DataType="REAL" InitialValue="" Comment="Передаточное значение таймера" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="Act" DataType="BOOL" InitialValue="" Comment="Флаг одинакового номера Dso в защите (внутр)" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="k" DataType="DINT" InitialValue="" Comment="Счетчик (для цикла перебора Dso)" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="m" DataType="DINT" InitialValue="" Comment="Номер рабочего объекта (для перебора Dso)" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="kSafe" DataType="typSafe" InitialValue="" Comment="Рабочий объект (для перебора Dso)" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="kDso" DataType="DINT" InitialValue="" Comment="Номер Dso рабочего объекта" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
  </LocalVars>
  <PouBody><![CDATA[FUNCTION processSafe
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Name                Data Type      Dimension            Direction  Attribute       Comment                         *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* processSafe         DINT                                VarOutput  Write           Результат выполнения функции *)
(* iPrgModify          BOOL                                VarInput   Read            Флаг полной перезагрузки программы ПЛК *)
(* iPrgChange          BOOL                                VarInput   Read            Флаг изменения программы ПЛК *)
(* i                   DINT                                Var        Read/Write      Счётчик *)
(* _bRes               BOOL                                Var        Read/Write      Результат функции BOOL *)
(* _dRes               DINT                                Var        Read/Write      Результат функции DINT *)
(* ------------------------------------------------------------------------------------------------------------------ *)
processSafe:= sSafe.iSize;
if sSafe.iSize>sSafe.iMax then processSafe:= -sSafe.iSize; return; end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проход по всем параметрам *)
i:= 1;   while i<=sSafe.iSize do
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Отключение резевных объектов *)
if not dSafe[i].nLogicNot then
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача в Рабочий объект *)
  iSafe:= dSafe[i];
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Сохраняемые переменные (чтение при первом скане) *)
  if nPrgModify then
    iSafe.sOn           := rSafe[i].sOn;                         (* СРАБАТЫВАНИЕ *)  
    iSafe.sOut          := rSafe[i].sOut;                        (* ВЫХОД АКТИВЕН *) 
    iSafe.sError        := rSafe[i].sError;                      (* НЕИСПРАВНОСТЬ КОНТУРА КОМАНД *)
    iSafe.sImit         := rSafe[i].sImit;                       (* Имитация *)
    iSafe.sMask         := rSafe[i].sMask;                       (* Маскирование *)
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Начало логики *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Имитация *)    
  iSafe.sImit:= (iSafe.sImit or iSafe.cImitOn) & not iSafe.cImitOff;
(* Маскирование *)    
  iSafe.sMask:= (iSafe.sMask or iSafe.cMaskOn or iSafe.cAutoMaskOn) & not iSafe.cMaskOff & not iSafe.cAutoMaskOff ;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Обработка состояний защиты *)
(* Вход активирован *)
  iSafe.sInput:= iSafe.xInput & iSafe.sWork; 
(* Внимание *)
  iSafe.sWarn := iSafe.xWarn  & iSafe.sWork & not iSafe.xInput; 
(* Срабатывание *)
  iSafe.sOn   := (iSafe.sOn or (iSafe.mTimer1=-1.0 or 
                                (iSafe.sInput & _tTimer(iSafe.tTimer1)= 0.0) or iSafe.sImit)) & 
                  not iSafe.cDebl & not iSafe.sMask;
(* Разрешено деблокирование *)
  iSafe.sDebl:= not iSafe.sInput & not iSafe.sImit & iSafe.sOn;  
(* Ввод в работу *) 
  iSafe.sWork:= ((iSafe.sWork or iSafe.mTimer2=-1) & iSafe.xWork) or not iSafe.nWork;
(* В норме *)
  iSafe.sOk   := not iSafe.sOn & not iSafe.sMask; 
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Таймеры *)
  (* T01 Срабатывание *)
  iSafe.mTimer1:= 
   _fTimer(iSafe.sInput & iSafe.sWork & not iSafe.sMask & _tTimer(iSafe.tTimer1)>0.0, 
           not iSafe.sInput or not iSafe.sWork or iSafe.sMask or iSafe.sOn, 
           _tTimer(iSafe.tTimer1), iSafe.mTimer1); 
  (* Т02 Ввод в работу *)
  iSafe.mTimer2:= 
    _fTimer(iSafe.xWork & iSafe.nWork, 
            not iSafe.xWork or iSafe.sWork, 
            _tTimer(iSafe.tTimer2), iSafe.mTimer2); 
(* Установка состояния *)
  iSafe.fCh:= iSafe.sOk   <>dSafe[i].sOk or 
              iSafe.sInput<>dSafe[i].sInput or 
              iSafe.sOn   <>dSafe[i].sOn or
			  iSafe.sMask <>dSafe[i].sMask or
			  iSafe.sImit <>dSafe[i].sImit;
(* Выходы *) 
  iSafe.yOut  := iSafe.sOn;
  iSafe.sOut  := iSafe.yOut;
  iSafe.yOutCh:= iSafe.sOn & iSafe.fCh;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* nDso - срабатывание *)
  (* Выходы 1...8 *)
  sError:= false;
  j:= 1;   while j<=8 do
	(* считывание номера Dso *)
	n:= iSafe.nDso[j];
    (* считывание Dso для локального ПЛК *)
	if n>=1 & n<=sDso.iSize then iDso:= dDso[n]; end_if;
	(* обработка таймера и выхода *)
	if n>0 then 
      (* Анализ режима *)
	  if iSafe.nMode>=1 & iSafe.nMode<=sSafe.iSize then
	    (* локальный Dso *)
		if    n>=1 & n<=sDso.iSize then
	      iDso.sModeOff:= false; (*dMode[iSafe.nMode].sOff or dMode[iSafe.nMode].sRepair;*)
	    (* удалённый Dso *)
	    elsif n>0 then
		  ;
		end_if;
	  end_if;
	  (* уставки таймеров *)
	  case j of
        1:  tTimer:= 0.0;  
        2:  tTimer:= _tTimer(iSafe.tTimer12);
        3:  tTimer:= _tTimer(iSafe.tTimer13);
        4:  tTimer:= _tTimer(iSafe.tTimer14);
        5:  tTimer:= _tTimer(iSafe.tTimer15);
		6:  tTimer:= _tTimer(iSafe.tTimer16);	
		7:  tTimer:= _tTimer(iSafe.tTimer17);
		8:  tTimer:= _tTimer(iSafe.tTimer18);
	  end_case;
	  (* Срабатывание *)
	  case j of
	    1: iDsoOn:= iSafe.sDsoOn1; oDsoOn:= dSafe[i].sDsoOn1;
	    2: iDsoOn:= iSafe.sDsoOn2; oDsoOn:= dSafe[i].sDsoOn2;
	    3: iDsoOn:= iSafe.sDsoOn3; oDsoOn:= dSafe[i].sDsoOn3;
	    4: iDsoOn:= iSafe.sDsoOn4; oDsoOn:= dSafe[i].sDsoOn4;
	    5: iDsoOn:= iSafe.sDsoOn5; oDsoOn:= dSafe[i].sDsoOn5;
	    6: iDsoOn:= iSafe.sDsoOn6; oDsoOn:= dSafe[i].sDsoOn6;
	    7: iDsoOn:= iSafe.sDsoOn7; oDsoOn:= dSafe[i].sDsoOn7;
	    8: iDsoOn:= iSafe.sDsoOn8; oDsoOn:= dSafe[i].sDsoOn8;
	  end_case;
	  (* Таймер задержки срабатывания выхода *)
	  if j>1 then 
	    iSafe.mSafeTimer[j+10]:= _fTimer((iSafe.sInput or iSafe.sImit) & iSafe.yOut & iSafe.yOutCh, 
		                                 not iSafe.yOut, 
									     tTimer, 
									     iSafe.mSafeTimer[j+10]);
		iTimer            := iSafe.mSafeTimer[j+10];
	  end_if;
	  (* Срабатывание *)
	  iDsoOn:= (iDsoOn or (iSafe.yOut & (tTimer=0.0 & iSafe.yOutCh) or iTimer=-1.0)) & not iSafe.cDebl & not iSafe.sMask;
	  case j of
	    1: iSafe.sDsoOn1:= iDsoOn and iSafe.sOn;
	    2: iSafe.sDsoOn2:= iDsoOn and iSafe.sOn;
	    3: iSafe.sDsoOn3:= iDsoOn and iSafe.sOn;
	    4: iSafe.sDsoOn4:= iDsoOn and iSafe.sOn;
	    5: iSafe.sDsoOn5:= iDsoOn and iSafe.sOn;
	    6: iSafe.sDsoOn6:= iDsoOn and iSafe.sOn;
	    7: iSafe.sDsoOn7:= iDsoOn and iSafe.sOn;
	    8: iSafe.sDsoOn8:= iDsoOn and iSafe.sOn;
	  end_case;
	  (*ПЕРЕБОР ЗАЩИТ ДЛЯ ПОИСКА СОВПАДАЮЩИХ DSO*)
	    if iSafe.cDebl then
	       Act:= FALSE;
	       k:= 1; while k<=sSafe.iSize do
	  	      (*находим сработавшую защиту, кроме себя*)
	          if k<>i & dSafe[k].sOn then
	 	         (*Поиск номера Dso В АКТИВНОЙ ЗАЩИТЕ*)
			     kDso:= 1; while kDso <=8 do
			        (*присваиваем номер от 1 до 8 Dso k-той защиты*)
			        m:= dSafe[k].nDso[kDso];
			        (*проверяем адекватность номера Dso*)
				    if m>=1 & m<=sDso.iSize & m = n then Act:= TRUE; exit; end_if;
			     kDso:= kDso+1; end_while;
		        if Act then exit; end_if;
		      end_if;
		   k:= k+1; end_while;
	    end_if;  
(* управление Dso локальным *)
	  if     n>=1 & n<=sDso.iSize then
	    (* Команда Включить (Безопасный Режим) *)
		iDso.cOnSafe := _fControl(iDso.cOnSafe,  iDsoOn & not oDsoOn, iSafe.sOn); 
		(* Команда Отключить (Безопасный Режим) *)					 
	    (* iDso.cOffSafe:= _fControl(iDso.cOffSafe, not iDsoOn & oDsoOn, not iSafe.sOn); *)
		iDso.cOffSafe:= _fControl(iDso.cOffSafe, not iDsoOn & oDsoOn & not Act, not iSafe.sOn);
	  (* управление Dso удалёнными *)
	  elsif n>0 then
        (* Дискретный параметр управления. Нет связи с удалённым ПЛК *)
		iDsoError:= _fCmdLinkGetNoLink(n, sDso.Idn);
		(* НЕИСПРАВНОСТЬ КОНТУРА КОМАНД *)
		sError:= sError or iDsoError;
		(* передача на состяния *)
		case j of
          1: iSafe.sDsoError1:= iDsoError;
          2: iSafe.sDsoError2:= iDsoError;
          3: iSafe.sDsoError3:= iDsoError;
          4: iSafe.sDsoError4:= iDsoError;
          5: iSafe.sDsoError5:= iDsoError;
          6: iSafe.sDsoError6:= iDsoError;
          7: iSafe.sDsoError7:= iDsoError;
          8: iSafe.sDsoError8:= iDsoError;
	    end_case;
	    (* Команда Включить (Безопасный Режим) *)
		_dRes:= _fCmdLinkCommand(iDsoOn & not oDsoOn, sDso.Idn, sDso.cOnSafe,  n, 0, 0);
		(* Команда Отключить (Безопасный Режим) *)					 
		_dRes:= _fCmdLinkCommand(not iDsoOn & oDsoOn, sDso.Idn, sDso.cOffSafe, n, 0, 0);
		(*_dRes:= _fCmdLinkCommand(iSafe.yOutCh & not iSafe.sOn, sDso.Idn, sDso.cOffSafe, n, 0, 0);*)
	  end_if;
	  (* Передача данных в Dso *)
	  if n>=1 & n<=sDso.iSize then dDso[n]:= iDso; end_if;
    end_if;
    (* Значения таймеров для ВУ *)
    if j>1 & iSafe.mSafeTimer[j+10]>=0.0 then iSafe.sTimer[j+10]:= ANY_TO_WORD(iSafe.mSafeTimer[j+10]*10.0); end_if;
  j:= j+1; end_while;	
(* ------------------------------------------------------------------------------------------------------------------ *)
  iSafe.sError:= sError;        (* НЕИСПРАВНОСТЬ КОНТУРА КОМАНД *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Конец логики *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Сохраняемые переменные (сохранение данных) *)
  rSafe[i].sOn          :=   iSafe.sOn;                          (* СРАБАТЫВАНИЕ *)  
  rSafe[i].sOut         :=   iSafe.sOut;                         (* ВЫХОД АКТИВЕН *) 
  rSafe[i].sError       :=   iSafe.sError;                       (* НЕИСПРАВНОСТЬ КОНТУРА КОМАНД *)
  rSafe[i].sImit        :=   iSafe.sImit;                        (* Имитация *)
  rSafe[i].sMask        :=   iSafe.sMask;                        (* Маскирование *)
  
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Упаковка сообщений для команд *)
  iSafe.Command.0       := iSafe.cImitOn;                        (* Команда оператора. Включить имитацию *)
  iSafe.Command.1       := iSafe.cImitOff;                       (* Команда оператора. Отключить имитацию *)
  iSafe.Command.2       := iSafe.cMaskOn;                        (* Команда оператора. Включить маскирование *)
  iSafe.Command.3       := iSafe.cMaskOff;                       (* Команда оператора. Отключить маскирование *)
  iSafe.Command.4       := iSafe.cDebl;                          (* Команда оператора. Деблокировать срабатывание *)
  iSafe.Command.5       := iSafe.cAutoMaskOn;                    (* Команда Автоматическая. Включить маскирование *)
  iSafe.Command.6       := iSafe.cAutoMaskOff;                   (* Команда Автоматическая. Отключить маскирование *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Cообщения для команд *)
  iSafe.MsAck_State:= ANY_TO_WORD(cInit);
  if iSafe.MsAck_State >iSafe.oMsAck_State then iSafe.MsEvt_Command:= 0;                  end_if;
  if iSafe.Command    <>0                 then iSafe.MsEvt_Command:= iSafe.Command;       end_if;
  iSafe.oMsAck_State:= iSafe.MsAck_State;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Сброс команд *)
  iSafe.Command:= 0;
  iSafe.cImitOn         := false;                                (* Команда оператора. Включить имитацию *)
  iSafe.cImitOff        := false;                                (* Команда оператора. Отключить имитацию *)
  iSafe.cMaskOn         := false;                                (* Команда оператора. Включить маскирование *)
  iSafe.cMaskOff        := false;                                (* Команда оператора. Отключить маскирование *)
  iSafe.cDebl           := false;                                (* Команда оператора. Деблокировать срабатывание *)
  iSafe.cAutoMaskOn     := false;                                (* Команда Автоматическая. Включить маскирование *)
  iSafe.cAutoMaskOff    := false;                                (* Команда Автоматическая. Отключить маскирование *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача из Рабочего объекта *)
  dSafe[i]:= iSafe;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Отключение резевных объектов *)
end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Отключение резервных объектов: Сброс состояния объекта *)
if dSafe[i].nLogicNot & not dSafe[i].oLogicNot then
  dSafe[i].sOk          := false;                                (* В НОРМЕ *)       
  dSafe[i].sOn          := false;                                (* СРАБАТЫВАНИЕ *)  
  dSafe[i].sWarn        := false;                                (* ВНИМАНИЕ *)      
  dSafe[i].sImit        := false;                                (* ИМИТАЦИЯ *)      
  dSafe[i].sMask        := false;                                (* МАСКИРОВАНИЕ *)  
  dSafe[i].sWork        := false;                                (* В РАБОТЕ *)      
  dSafe[i].sDebl        := false;                                (* РАЗРЕШЕНО ДЕБЛОКИРОВАНИЕ *)
  dSafe[i].sInput       := false;                                (* ВХОД АКТИВЕН *)  
  dSafe[i].sOut         := false;                                (* ВЫХОД АКТИВЕН *) 
  dSafe[i].sDsoOn1      := false;                                (* Дискретный параметр управления. Состояние срабатывания *)
  dSafe[i].sDsoOn2      := false;                                (* Дискретный параметр управления. Состояние срабатывания *)
  dSafe[i].sDsoOn3      := false;                                (* Дискретный параметр управления. Состояние срабатывания *)
  dSafe[i].sDsoOn4      := false;                                (* Дискретный параметр управления. Состояние срабатывания *)
  dSafe[i].sDsoOn5      := false;                                (* Дискретный параметр управления. Состояние срабатывания *)
  dSafe[i].sDsoOn6      := false;                                (* Дискретный параметр управления. Состояние срабатывания *)
  dSafe[i].sDsoOn7      := false;                                (* Дискретный параметр управления. Состояние срабатывания *)
  dSafe[i].sDsoOn8      := false;                                (* Дискретный параметр управления. Состояние срабатывания *)
  dSafe[i].sError       := false;                                (* НЕИСПРАВНОСТЬ КОНТУРА КОМАНД *)
  dSafe[i].sDsoError1   := false;                                (* Дискретный параметр управления. Нет связи с удалённым ПЛК *)
  dSafe[i].sDsoError2   := false;                                (* Дискретный параметр управления. Нет связи с удалённым ПЛК *)
  dSafe[i].sDsoError3   := false;                                (* Дискретный параметр управления. Нет связи с удалённым ПЛК *)
  dSafe[i].sDsoError4   := false;                                (* Дискретный параметр управления. Нет связи с удалённым ПЛК *)
  dSafe[i].sDsoError5   := false;                                (* Дискретный параметр управления. Нет связи с удалённым ПЛК *)
  dSafe[i].sDsoError6   := false;                                (* Дискретный параметр управления. Нет связи с удалённым ПЛК *)
  dSafe[i].sDsoError7   := false;                                (* Дискретный параметр управления. Нет связи с удалённым ПЛК *)
  dSafe[i].sDsoError8   := false;                                (* Дискретный параметр управления. Нет связи с удалённым ПЛК *)
(* maskStateNone=2147451391 *)
end_if;
dSafe[i].oLogicNot:= dSafe[i].nLogicNot;
(* ------------------------------------------------------------------------------------------------------------------ *)
i:= i+1; end_while;

END_FUNCTION]]></PouBody>
  <PouUIProperties>
    <Root Version="7">
  <LanguageContainerStyle CommentTextColor="Green" CommentFont="Courier New, 10pt" PonctuationTextColor="Black" PonctuationFont="Courier New, 10pt" IdentifierTextColor="Black" IdentifierFont="Courier New, 10pt" OperatorTextColor="Black" OperatorFont="Courier New, 10pt" ReservedWordTextColor="Fuchsia" ReservedWordFont="Courier New, 10pt" PouTextColor="BlueViolet" PouFont="Courier New, 10pt" NumberTextColor="Firebrick" NumberFont="Courier New, 10pt" StringTextColor="Gray" StringFont="Courier New, 10pt" EditorTextAreaBackgroundColor="White" EditorFont="Courier New, 10pt" Index="0" />
</Root>
  </PouUIProperties>
</Pou>