<?xml version="1.0" encoding="utf-8"?>
<Pou FileVersion="200.00.003" Name="prociombAna" ElementGuid="72335507-8782-45e6-85b6-cf8eb78d18df" Comment="" SingleTextLine="Обмен Modbus Dio" Language="ST" CustomFbd="0" Localization="Prj" GroupName="(User defined)" GenDebugInfo="false" UseResPassword="true" GenerateSymbMon="true" Is1499="false">
  <Function IdentifierNb="0" Keyword="" ConvDirection="NoConversion" DataType="DINT" />
  <LocalVars>
    <Variable Name="prociombAna" DataType="DINT" InitialValue="" Comment="" Address="" Modifier="Constant" Kind="VarOutput" Alias="" AccessRights="Write" StringSize="0" Direction="Output" CommentFields="" Attributes="23825" />
    <Variable Name="nWr" DataType="BOOL" InitialValue="" Comment="true - Запись из Modbus в ПЛК/false - чтение из ПЛК в Modbus" Address="" Modifier="Constant" Kind="VarInput" Alias="" AccessRights="Read" StringSize="0" Direction="Input" CommentFields="" Attributes="0" />
    <Variable Name="i" DataType="DINT" InitialValue="" Comment="Счётчик" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_bRes" DataType="BOOL" InitialValue="" Comment="Результат функции BOOL" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="n" DataType="DINT" InitialValue="" Comment="Номер в массиве iodMBP_4x[m].regs[n]" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="iReal" DataType="REAL" InitialValue="" Comment="Массив промежуточных данных REAL" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="">
      <Dimension Lower="0" Upper="0" />
    </Variable>
    <Variable Name="j" DataType="DINT" InitialValue="" Comment="Счётчик" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="m" DataType="DINT" InitialValue="" Comment="Номер в массиве iodMBP_4x[m].regs[n]" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="iWord" DataType="WORD" InitialValue="" Comment="Массив промежуточных данных WORD" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="">
      <Dimension Lower="0" Upper="1" />
    </Variable>
    <Variable Name="_iRes" DataType="INT" InitialValue="" Comment="Результат функции INT" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="iData" DataType="WORD" InitialValue="" Comment="Массив промежуточных данных" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="">
      <Dimension Lower="0" Upper="1" />
      <Dimension Lower="0" Upper="99" />
    </Variable>
    <Variable Name="_dRes" DataType="DINT" InitialValue="" Comment="Результат функции DINT" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
  </LocalVars>
  <PouBody><![CDATA[FUNCTION prociombAna
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Name                Data Type      Dimension            Direction  Attribute       Comment                         *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* prociombAna         BOOL                                VarOutput  Write           Результат выполнения функции *)
(* nWr                 BOOL                                VarInput   Read            true - Запись из Modbus в ПЛК/false - чтение из ПЛК в Modbus *)
(* iData               WORD          [0...0,0...99]        Var        Read/Write      Массив промежуточных данных *)
(* iWord               WORD          [0...1]               Var        Read/Write      Массив промежуточных данных WORD *)
(* iReal               REAL          [0...0]               Var        Read/Write      Массив промежуточных данных REAL *)
(* j                   DINT                                Var        Read/Write      Счётчик *)
(* m                   DINT                                Var        Read/Write      Номер в массиве iodMBP_4x[m].regs[n] *)
(* n                   DINT                                Var        Read/Write      Номер в массиве iodMBP_4x[m].regs[n] *)
(* ------------------------------------------------------------------------------------------------------------------ *)
prociombAna:= sAna.iSize;
if sAna.iSize>sAna.iMax then prociombAna:= -sAna.iSize; return; end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проход по всем параметрам *)
i:= 1;   while i<=sAna.iSize do
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача в Рабочий объект *)
  iAna:= dAna[i];
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проверка *)
  if sAna.mbSize<=0 or
     mbAna[i, 0]<0 or mbAna[i, 0]>64 or mbAna[i, 1]<1 or mbAna[i, 1]>1024 then
     prociombAna:= -2;
  end_if;
  (* Считывание настроечных данных *)
  m:= ANY_TO_DINT(mbAna[i, 0]); n:= ANY_TO_DINT(mbAna[i, 1]);
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение данных из Modbus в ПЛК *)
  if nWr Then
    iAna.wrCRC:= CRC16ForModbusRegs(iodMBP_4x, m, n, sAna.mbSize);
    if iAna.wrCRC<>iAna.rdCRC then
      iAna.wrCount:= iAna.wrCount+1; if iAna.wrCount>1000000 then iAna.wrCount:= 1; end_if;
      _dRes:= SafeCopyFromModbusREGsArray(iodMBP_4x, iData, m, n, 0, 0, sAna.mbSize);
  (* ----------------------------------------------------------- *)
      iAna.Value        := DWordToReal(                                                    (* Значение *)      
                           SetWordToDWord(iData[0,    2], 1,                               (* Значение Hi Word *)
                           SetWordToDWord(iData[0,    1], 0, 0)));                         (* Значение Low Word *)
  (* ----------------------------------------------------------- *)
      iAna.State        := SetWordToDWord(iData[0,    3], 0, iAna.State);                  (* Состояние Low Word *)
      iAna.State        := SetWordToDWord(iData[0,    4], 1, iAna.State);                  (* Состояние Hi Word *)
  (* ----------------------------------------------------------- *)
      iAna.Command      :=             iData[0,    6];                                     (* Команды *)       
      iAna.cImitOn      := iAna.Command.0;                                                 (* Команда оператора. Режим имитации Включить *)
      iAna.cImitOff     := iAna.Command.1;                                                 (* Команда оператора. Режим имитации Отключить *)
      iAna.cMaskOn      := iAna.Command.2;                                                 (* Команда оператора. Режим Ремонт Включить *)
      iAna.cMaskOff     := iAna.Command.3;                                                 (* Команда оператора. Режим Ремонт Отключить *)
      iAna.cHartSelFV   := iAna.Command.4;                                                 (* Команда оператора. Выбор канала Hart FV *)
      iAna.cHartSelSV   := iAna.Command.5;                                                 (* Команда оператора. Выбор канала Hart SV *)
      iAna.cHartSelTV   := iAna.Command.6;                                                 (* Команда оператора. Выбор канала Hart TV *)
      iAna.cHartSelQV   := iAna.Command.7;                                                 (* Команда оператора. Выбор канала Hart QV *)
  (* ----------------------------------------------------------- *)
      iAna.MsAck_State  :=             iData[0,    9];                                     (* Состояние (Подтверждение) *)
  (* ----------------------------------------------------------- *)
      iAna.tCurrHi      :=             iData[0,   11];                                     (* Значение входа. Верхний предел <мА> *)
  (* ----------------------------------------------------------- *)
      iAna.tCurrLow     :=             iData[0,   12];                                     (* Значение входа. Нижний предел <мА> *)
  (* ----------------------------------------------------------- *)
      iAna.tCurrExt     :=             iData[0,   13];                                     (* Значение входа. Расширение предела <мА> *)
  (* ----------------------------------------------------------- *)
      iAna.tHLm         := DWordToReal(                                                    (* Верхний инженерный диапазон <Unit> *)
                           SetWordToDWord(iData[0,   15], 1,                               (* Верхний инженерный диапазон <Unit> Hi Word *)
                           SetWordToDWord(iData[0,   14], 0, 0)));                         (* Верхний инженерный диапазон <Unit> Low Word *)
  (* ----------------------------------------------------------- *)
      iAna.tHH1         := DWordToReal(                                                    (* Верхний Аварийный (HH1) <Unit> *)
                           SetWordToDWord(iData[0,   17], 1,                               (* Верхний Аварийный (HH1) <Unit> Hi Word *)
                           SetWordToDWord(iData[0,   16], 0, 0)));                         (* Верхний Аварийный (HH1) <Unit> Low Word *)
  (* ----------------------------------------------------------- *)
      iAna.tHH          := DWordToReal(                                                    (* Верхний Аварийный (HH) <Unit> *)
                           SetWordToDWord(iData[0,   19], 1,                               (* Верхний Аварийный (HH) <Unit> Hi Word *)
                           SetWordToDWord(iData[0,   18], 0, 0)));                         (* Верхний Аварийный (HH) <Unit> Low Word *)
  (* ----------------------------------------------------------- *)
      iAna.tH1          := DWordToReal(                                                    (* Верхний Предупредительный (H1) <Unit> *)
                           SetWordToDWord(iData[0,   21], 1,                               (* Верхний Предупредительный (H1) <Unit> Hi Word *)
                           SetWordToDWord(iData[0,   20], 0, 0)));                         (* Верхний Предупредительный (H1) <Unit> Low Word *)
  (* ----------------------------------------------------------- *)
      iAna.tH           := DWordToReal(                                                    (* Верхний Предупредительный (H) <Unit> *)
                           SetWordToDWord(iData[0,   23], 1,                               (* Верхний Предупредительный (H) <Unit> Hi Word *)
                           SetWordToDWord(iData[0,   22], 0, 0)));                         (* Верхний Предупредительный (H) <Unit> Low Word *)
  (* ----------------------------------------------------------- *)
      iAna.tL           := DWordToReal(                                                    (* Нижний Предупредительный (L) <Unit> *)
                           SetWordToDWord(iData[0,   25], 1,                               (* Нижний Предупредительный (L) <Unit> Hi Word *)
                           SetWordToDWord(iData[0,   24], 0, 0)));                         (* Нижний Предупредительный (L) <Unit> Low Word *)
  (* ----------------------------------------------------------- *)
      iAna.tL1          := DWordToReal(                                                    (* Нижний Предупредительный (L1) <Unit> *)
                           SetWordToDWord(iData[0,   27], 1,                               (* Нижний Предупредительный (L1) <Unit> Hi Word *)
                           SetWordToDWord(iData[0,   26], 0, 0)));                         (* Нижний Предупредительный (L1) <Unit> Low Word *)
  (* ----------------------------------------------------------- *)
      iAna.tLL          := DWordToReal(                                                    (* Нижний Аварийный (LL) <Unit> *)
                           SetWordToDWord(iData[0,   29], 1,                               (* Нижний Аварийный (LL) <Unit> Hi Word *)
                           SetWordToDWord(iData[0,   28], 0, 0)));                         (* Нижний Аварийный (LL) <Unit> Low Word *)
  (* ----------------------------------------------------------- *)
      iAna.tLL1         := DWordToReal(                                                    (* Нижний Аварийный (LL1) <Unit> *)
                           SetWordToDWord(iData[0,   31], 1,                               (* Нижний Аварийный (LL1) <Unit> Hi Word *)
                           SetWordToDWord(iData[0,   30], 0, 0)));                         (* Нижний Аварийный (LL1) <Unit> Low Word *)
  (* ----------------------------------------------------------- *)
      iAna.tLLm         := DWordToReal(                                                    (* Нижний инженерный диапазон <Unit> *)
                           SetWordToDWord(iData[0,   33], 1,                               (* Нижний инженерный диапазон <Unit> Hi Word *)
                           SetWordToDWord(iData[0,   32], 0, 0)));                         (* Нижний инженерный диапазон <Unit> Low Word *)
  (* ----------------------------------------------------------- *)
      iAna.tHist        := DWordToReal(                                                    (* Гистерезис <Unit> *)
                           SetWordToDWord(iData[0,   35], 1,                               (* Гистерезис <Unit> Hi Word *)
                           SetWordToDWord(iData[0,   34], 0, 0)));                         (* Гистерезис <Unit> Low Word *)
  (* ----------------------------------------------------------- *)
      iAna.tTimer1      :=             iData[0,   36];                                     (* Т01 Фильтрация дребезга <сек.> *)
  (* ----------------------------------------------------------- *)
      iAna.tEnableSet   := SetWordToDWord(iData[0,   37], 0, iAna.tEnableSet);             (* Флаги включения уставок Low Word *)
      iAna.tEnableSet   := SetWordToDWord(iData[0,   38], 1, iAna.tEnableSet);             (* Флаги включения уставок Hi Word *)
  (* ----------------------------------------------------------- *)
      iAna.tCurrDiff    :=             iData[0,   39];                                     (* Рассогл. каналов тока <%> *)
  (* ----------------------------------------------------------- *)
      iAna.tTimer11     :=             iData[0,   40];                                     (* Т11 Фильтр рассогл. каналов тока <сек.> *)
    end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение данных из Modbus в ПЛК *)
  else
  (* ----------------------------------------------------------- *)
    iData[0,    0]    := ANY_TO_WORD(iAna.pState);                                       (* Соcтояние для панели *)
  (* ----------------------------------------------------------- *)
    iData[0,    1]    := GetWordFromDWord(RealToDWord(iAna.Value), 0);                   (* Значение Low Word *)
    iData[0,    2]    := GetWordFromDWord(RealToDWord(iAna.Value), 1);                   (* Значение Hi Word *)
    iAna.State.0      := iAna.sHLm;                                                      (* Выше шкалы датчика *)
    iAna.State.1      := iAna.sHH1;                                                      (* Верхний Аварийный (HH1) *)
    iAna.State.2      := iAna.sHH;                                                       (* Верхний Аварийный (HH) *)
    iAna.State.3      := iAna.sH;                                                        (* Верхний Предупредительный (H) *)
    iAna.State.4      := iAna.sOk;                                                       (* В норме *)       
    iAna.State.5      := iAna.sL;                                                        (* Нижний Предупредительный (L) *)
    iAna.State.6      := iAna.sLL;                                                       (* Нижний Аварийный (LL) *)
    iAna.State.7      := iAna.sLL1;                                                      (* Нижний Аварийный (LL1) *)
    iAna.State.8      := iAna.sLLm;                                                      (* Ниже шкалы датчика *)
    iAna.State.9      := iAna.sError;                                                    (* Неисправность канала *)
    iAna.State.10     := iAna.sMask;                                                     (* Режим Ремонт *)  
    iAna.State.11     := iAna.sImit;                                                     (* Имитация *)      
    iAna.State.12     := iAna.sEnableHH1;                                                (* Включена в работу Уставка Верхний Аварийный (HH1) *)
    iAna.State.13     := iAna.sEnableHH;                                                 (* Включена в работу Уставка Верхний Аварийный (HH) *)
    iAna.State.14     := iAna.sEnableH;                                                  (* Включена в работу Уставка Верхний Предупредительный (H) *)
    iAna.State.15     := iAna.sEnableL;                                                  (* Включена в работу Уставка Нижний Предупредительный (L) *)
    iAna.State.16     := iAna.sEnableLL;                                                 (* Включена в работу Уставка Нижний Аварийный (LL) *)
    iAna.State.17     := iAna.sEnableLL1;                                                (* Включена в работу Уставка Нижний Аварийный (LL1) *)
    iAna.State.18     := iAna.emp18;                                                     (* Резерв18 *)      
    iAna.State.19     := iAna.emp19;                                                     (* Резерв19 *)      
    iAna.State.20     := iAna.emp20;                                                     (* Резерв20 *)      
    iAna.State.21     := iAna.eCurrDiff;                                                 (* Раcсогласование каналов резервирования *)
    iAna.State.22     := iAna.sH1;                                                       (* Верхний Предупредительный (H1) *)
    iAna.State.23     := iAna.sL1;                                                       (* Нижний Предупредительный (L1) *)
    iAna.State.24     := iAna.sEnableH1;                                                 (* Включена в работу Уставка Верхний Предупредительный (H1) *)
    iAna.State.25     := iAna.sEnableL1;                                                 (* Включена в работу Уставка Нижний Предупредительный (L1) *)
    iAna.State.26     := iAna.nCurrR;                                                    (* Используется Резервирование каналов *)
    iAna.State.27     := iAna.sHartError;                                                (* Неисправность канала Hart *)
    iAna.State.28     := iAna.sHartEnable;                                               (* Есть каналы Hart *)
    iAna.State.29     := iAna.sHartSel1;                                                 (* Выбор канала Hart *)
    iAna.State.30     := iAna.sHartSel2;                                                 (* Выбор канала Hart *)
    iAna.State.31     := iAna.sErrSensor;                                                (* Неисправность датчика (внешняя) *)
  (* ----------------------------------------------------------- *)
    iData[0,    3]    := GetWordFromDWord(iAna.State, 0);                                (* Состояние Low Word *)
    iData[0,    4]    := GetWordFromDWord(iAna.State, 1);                                (* Состояние Hi Word *)
    iAna.DState.0     := iAna.eHartM;                                                    (* Неисправен канал Hart Основной *)
    iAna.DState.1     := iAna.eHartR;                                                    (* Неисправен канал Hart Резервный *)
    iAna.DState.2     := iAna.sOkHartM;                                                  (* Канал Hart Основной. В работе *)
    iAna.DState.3     := iAna.sOkHartR;                                                  (* Канал Hart Резервный. В работе *)
    iAna.DState.4     := iAna.eCurrM;                                                    (* Неисправен канал Основной *)
    iAna.DState.5     := iAna.eCurrR;                                                    (* Неисправен канал Резервный *)
    iAna.DState.6     := iAna.sOkCurrM;                                                  (* Канал тока Основной. В работе *)
    iAna.DState.7     := iAna.sOkCurrR;                                                  (* Канал тока Резервный. В работе *)
  (* ----------------------------------------------------------- *)
    iData[0,    5]    :=             iAna.DState;                                        (* Состояние. Дополнительное *)
    iAna.Command.0    := iAna.cImitOn;                                                   (* Команда оператора. Режим имитации Включить *)
    iAna.Command.1    := iAna.cImitOff;                                                  (* Команда оператора. Режим имитации Отключить *)
    iAna.Command.2    := iAna.cMaskOn;                                                   (* Команда оператора. Режим Ремонт Включить *)
    iAna.Command.3    := iAna.cMaskOff;                                                  (* Команда оператора. Режим Ремонт Отключить *)
    iAna.Command.4    := iAna.cHartSelFV;                                                (* Команда оператора. Выбор канала Hart FV *)
    iAna.Command.5    := iAna.cHartSelSV;                                                (* Команда оператора. Выбор канала Hart SV *)
    iAna.Command.6    := iAna.cHartSelTV;                                                (* Команда оператора. Выбор канала Hart TV *)
    iAna.Command.7    := iAna.cHartSelQV;                                                (* Команда оператора. Выбор канала Hart QV *)
  (* ----------------------------------------------------------- *)
    iData[0,    6]    :=             iAna.Command;                                       (* Команды *)       
  (* ----------------------------------------------------------- *)
    iData[0,    7]    := GetWordFromDWord(RealToDWord(iAna.yHartValue), 0);              (* Hart: Значение выхода (выбор) Low Word *)
    iData[0,    8]    := GetWordFromDWord(RealToDWord(iAna.yHartValue), 1);              (* Hart: Значение выхода (выбор) Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,    9]    :=             iAna.MsAck_State;                                   (* Состояние (Подтверждение) *)
  (* ----------------------------------------------------------- *)
    iData[0,   10]    :=             iAna.MsEvt_Command;                                 (* Команды (Сообщения) *)
  (* ----------------------------------------------------------- *)
    iData[0,   11]    :=             iAna.tCurrHi;                                       (* Значение входа. Верхний предел <мА> *)
  (* ----------------------------------------------------------- *)
    iData[0,   12]    :=             iAna.tCurrLow;                                      (* Значение входа. Нижний предел <мА> *)
  (* ----------------------------------------------------------- *)
    iData[0,   13]    :=             iAna.tCurrExt;                                      (* Значение входа. Расширение предела <мА> *)
  (* ----------------------------------------------------------- *)
    iData[0,   14]    := GetWordFromDWord(RealToDWord(iAna.tHLm), 0);                    (* Верхний инженерный диапазон <Unit> Low Word *)
    iData[0,   15]    := GetWordFromDWord(RealToDWord(iAna.tHLm), 1);                    (* Верхний инженерный диапазон <Unit> Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   16]    := GetWordFromDWord(RealToDWord(iAna.tHH1), 0);                    (* Верхний Аварийный (HH1) <Unit> Low Word *)
    iData[0,   17]    := GetWordFromDWord(RealToDWord(iAna.tHH1), 1);                    (* Верхний Аварийный (HH1) <Unit> Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   18]    := GetWordFromDWord(RealToDWord(iAna.tHH), 0);                     (* Верхний Аварийный (HH) <Unit> Low Word *)
    iData[0,   19]    := GetWordFromDWord(RealToDWord(iAna.tHH), 1);                     (* Верхний Аварийный (HH) <Unit> Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   20]    := GetWordFromDWord(RealToDWord(iAna.tH1), 0);                     (* Верхний Предупредительный (H1) <Unit> Low Word *)
    iData[0,   21]    := GetWordFromDWord(RealToDWord(iAna.tH1), 1);                     (* Верхний Предупредительный (H1) <Unit> Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   22]    := GetWordFromDWord(RealToDWord(iAna.tH), 0);                      (* Верхний Предупредительный (H) <Unit> Low Word *)
    iData[0,   23]    := GetWordFromDWord(RealToDWord(iAna.tH), 1);                      (* Верхний Предупредительный (H) <Unit> Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   24]    := GetWordFromDWord(RealToDWord(iAna.tL), 0);                      (* Нижний Предупредительный (L) <Unit> Low Word *)
    iData[0,   25]    := GetWordFromDWord(RealToDWord(iAna.tL), 1);                      (* Нижний Предупредительный (L) <Unit> Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   26]    := GetWordFromDWord(RealToDWord(iAna.tL1), 0);                     (* Нижний Предупредительный (L1) <Unit> Low Word *)
    iData[0,   27]    := GetWordFromDWord(RealToDWord(iAna.tL1), 1);                     (* Нижний Предупредительный (L1) <Unit> Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   28]    := GetWordFromDWord(RealToDWord(iAna.tLL), 0);                     (* Нижний Аварийный (LL) <Unit> Low Word *)
    iData[0,   29]    := GetWordFromDWord(RealToDWord(iAna.tLL), 1);                     (* Нижний Аварийный (LL) <Unit> Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   30]    := GetWordFromDWord(RealToDWord(iAna.tLL1), 0);                    (* Нижний Аварийный (LL1) <Unit> Low Word *)
    iData[0,   31]    := GetWordFromDWord(RealToDWord(iAna.tLL1), 1);                    (* Нижний Аварийный (LL1) <Unit> Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   32]    := GetWordFromDWord(RealToDWord(iAna.tLLm), 0);                    (* Нижний инженерный диапазон <Unit> Low Word *)
    iData[0,   33]    := GetWordFromDWord(RealToDWord(iAna.tLLm), 1);                    (* Нижний инженерный диапазон <Unit> Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   34]    := GetWordFromDWord(RealToDWord(iAna.tHist), 0);                   (* Гистерезис <Unit> Low Word *)
    iData[0,   35]    := GetWordFromDWord(RealToDWord(iAna.tHist), 1);                   (* Гистерезис <Unit> Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   36]    :=             iAna.tTimer1;                                       (* Т01 Фильтрация дребезга <сек.> *)
  (* ----------------------------------------------------------- *)
    iData[0,   37]    := GetWordFromDWord(iAna.tEnableSet, 0);                           (* Флаги включения уставок Low Word *)
    iData[0,   38]    := GetWordFromDWord(iAna.tEnableSet, 1);                           (* Флаги включения уставок Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,   39]    :=             iAna.tCurrDiff;                                     (* Рассогл. каналов тока <%> *)
  (* ----------------------------------------------------------- *)
    iData[0,   40]    :=             iAna.tTimer11;                                      (* Т11 Фильтр рассогл. каналов тока <сек.> *)
(* ------------------------------------------------------------------------------------------------------------------ *)
    _dRes:= SafeCopyToModbusREGsArray(iData, iodMBP_4x, 0, 0, m, n, sAna.mbSize);
    iAna.rdCRC:= CRC16ForModbusRegs(iodMBP_4x, m, n, sAna.mbSize);
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача из Рабочего объекта *)
  dAna[i]:= iAna;
i:= i+1; end_while;
END_FUNCTION]]></PouBody>
  <PouUIProperties>
    <Root Version="7">
  <LanguageContainerStyle CommentTextColor="Green" CommentFont="Courier New, 10pt" PonctuationTextColor="Black" PonctuationFont="Courier New, 10pt" IdentifierTextColor="Black" IdentifierFont="Courier New, 10pt" OperatorTextColor="Black" OperatorFont="Courier New, 10pt" ReservedWordTextColor="Fuchsia" ReservedWordFont="Courier New, 10pt" PouTextColor="BlueViolet" PouFont="Courier New, 10pt" NumberTextColor="Firebrick" NumberFont="Courier New, 10pt" StringTextColor="Gray" StringFont="Courier New, 10pt" EditorTextAreaBackgroundColor="White" EditorFont="Courier New, 10pt" Index="0" />
</Root>
  </PouUIProperties>
</Pou>