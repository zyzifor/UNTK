<?xml version="1.0" encoding="utf-8"?>
<Pou FileVersion="200.00.003" Name="prociombDio" ElementGuid="43b5c661-8ec4-425c-b410-6fd55b7efbd8" Comment="" SingleTextLine="Обмен Modbus Dio" Language="ST" CustomFbd="0" Localization="Prj" GroupName="(User defined)" GenDebugInfo="false" UseResPassword="true" GenerateSymbMon="true" Is1499="false">
  <Function IdentifierNb="0" Keyword="" ConvDirection="NoConversion" DataType="DINT" />
  <LocalVars>
    <Variable Name="prociombDio" DataType="DINT" InitialValue="" Comment="" Address="" Modifier="Constant" Kind="VarOutput" Alias="" AccessRights="Write" StringSize="0" Direction="Output" CommentFields="" Attributes="23825" />
    <Variable Name="nWr" DataType="BOOL" InitialValue="" Comment="true - Запись из Modbus в ПЛК/false - чтение из ПЛК в Modbus" Address="" Modifier="Constant" Kind="VarInput" Alias="" AccessRights="Read" StringSize="0" Direction="Input" CommentFields="" Attributes="0" />
    <Variable Name="i" DataType="DINT" InitialValue="" Comment="Счётчик" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_bRes" DataType="BOOL" InitialValue="" Comment="Результат функции BOOL" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="_iRes" DataType="INT" InitialValue="" Comment="" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="n" DataType="DINT" InitialValue="" Comment="Номер в массиве iodMBP_4x[m].regs[n]" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="j" DataType="DINT" InitialValue="" Comment="Счётчик" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="m" DataType="DINT" InitialValue="" Comment="Номер в массиве iodMBP_4x[m].regs[n]" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
    <Variable Name="iData" DataType="WORD" InitialValue="" Comment="Массив промежуточных данных" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="">
      <Dimension Lower="0" Upper="1" />
      <Dimension Lower="0" Upper="99" />
    </Variable>
    <Variable Name="_dRes" DataType="DINT" InitialValue="" Comment="Результат функции DINT" Address="" Modifier="NonRetain" Kind="Var" Alias="" AccessRights="ReadWrite" StringSize="0" RetainFlags="" CommentFields="" Attributes="0" GroupName="" />
  </LocalVars>
  <PouBody><![CDATA[FUNCTION prociombDio
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Name                Data Type      Dimension            Direction  Attribute       Comment                         *)
(* ------------------------------------------------------------------------------------------------------------------ *)
(* prociombDio         BOOL                                VarOutput  Write           Результат выполнения функции *)
(* nWr                 BOOL                                VarInput   Read            true - Запись из Modbus в ПЛК/false - чтение из ПЛК в Modbus *)
(* iData               WORD          [0...0,0...99]        Var        Read/Write      Массив промежуточных данных *)
(* iWord               WORD          [0...1]               Var        Read/Write      Массив промежуточных данных WORD *)
(* iReal               REAL          [0...0]               Var        Read/Write      Массив промежуточных данных REAL *)
(* j                   DINT                                Var        Read/Write      Счётчик *)
(* m                   DINT                                Var        Read/Write      Номер в массиве iodMBP_4x[m].regs[n] *)
(* n                   DINT                                Var        Read/Write      Номер в массиве iodMBP_4x[m].regs[n] *)
(* ------------------------------------------------------------------------------------------------------------------ *)
prociombDio:= sDio.iSize;
if sDio.iSize>sDio.iMax then prociombDio:= -sDio.iSize; return; end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проход по всем параметрам *)
i:= 1;   while i<=sDio.iSize do
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача в Рабочий объект *)
  iDio:= dDio[i];
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Проверка *)
  if sDio.mbSize<=0 or
     mbDio[i, 0]<0 or mbDio[i, 0]>64 or mbDio[i, 1]<1 or mbDio[i, 1]>1024 then
     prociombDio:= -2;
  end_if;
  (* Считывание настроечных данных *)
  m:= ANY_TO_DINT(mbDio[i, 0]); n:= ANY_TO_DINT(mbDio[i, 1]);
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение данных из Modbus в ПЛК *)
  if nWr Then
    iDio.wrCRC:= CRC16ForModbusRegs(iodMBP_4x, m, n, sDio.mbSize);
    if iDio.wrCRC<>iDio.rdCRC then
      iDio.wrCount:= iDio.wrCount+1; if iDio.wrCount>1000000 then iDio.wrCount:= 1; end_if;
      _dRes:= SafeCopyFromModbusREGsArray(iodMBP_4x, iData, m, n, 0, 0, sDio.mbSize);
  (* ----------------------------------------------------------- *)
      iDio.State        := SetWordToDWord(iData[0,    0], 0, iDio.State);                  (* Состояние Low Word *)
      iDio.State        := SetWordToDWord(iData[0,    1], 1, iDio.State);                  (* Состояние Hi Word *)
      iDio.cTestOn      := iDio.State.6;                                                   (* Команда оператора. Включить режим Тестирование *)
      iDio.cTestOff     := iDio.State.7;                                                   (* Команда оператора. Отключить режим Тестирование *)
      iDio.sReserv      := iDio.State.30;                                                  (* Модуль в резерве *)
  (* ----------------------------------------------------------- *)
      iDio.Extend       := SetWordToDWord(iData[0,    2], 0, iDio.Extend);                 (* Расширение диагностики Low Word *)
      iDio.Extend       := SetWordToDWord(iData[0,    3], 1, iDio.Extend);                 (* Расширение диагностики Hi Word *)
  (* ----------------------------------------------------------- *)
      iDio.DData        := SetWordToDWord(iData[0,    4], 0, iDio.DData);                  (* Данные дискретных каналов Low Word *)
      iDio.DData        := SetWordToDWord(iData[0,    5], 1, iDio.DData);                  (* Данные дискретных каналов Hi Word *)
  (* ----------------------------------------------------------- *)
  j:= 0;   while j<=15 do
      iDio.mA[j]        :=             iData[0, j+ 8];                                     (* Данные аналоговых каналов (mA*1000) *)
  j:= j+1; end_while;
  (* ----------------------------------------------------------- *)
      iDio.MsAck_State  :=             iData[0,   24];                                     (* Состояние (Подтверждение) *)
    end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Чтение данных из Modbus в ПЛК *)
  else
    iDio.State.0      := iDio.sOk;                                                       (* В норме *)       
    iDio.State.1      := iDio.sTest;                                                     (* Режим: Тестирование *)
    iDio.State.2      := iDio.sNotComp;                                                  (* Установлен не совместимый модуль *)
    iDio.State.3      := iDio.sNotModule;                                                (* Модуль не установлен *)
    iDio.State.4      := iDio.sNotCAN1;                                                  (* BusA Отсутствует соединение CAN *)
    iDio.State.5      := iDio.sNotCAN2;                                                  (* BusB Отсутствует соединение CAN *)
    iDio.State.6      := iDio.cTestOn;                                                   (* Команда оператора. Включить режим Тестирование *)
    iDio.State.7      := iDio.cTestOff;                                                  (* Команда оператора. Отключить режим Тестирование *)
    iDio.State.8      := iDio.sHWError;                                                  (* Аппаратная неисправность *)
    iDio.State.9      := iDio.ledRun;                                                    (* Индикатор Run - горит *)
    iDio.State.10     := iDio.ledErr;                                                    (* Индикатор Err - горит *)
    iDio.State.11     := iDio.blkErr;                                                    (* Индикатор Err - мигает *)
    iDio.State.12     := iDio.ledBusA;                                                   (* Индикатор BusA - горит *)
    iDio.State.13     := iDio.blkBusA;                                                   (* Индикатор BusA - мигает *)
    iDio.State.14     := iDio.ledBusB;                                                   (* Индикатор BusB - горит *)
    iDio.State.15     := iDio.blkBusB;                                                   (* Индикатор BusB - мигает *)
    iDio.State.16     := iDio.sEmp16;                                                    (* Резерв *)        
    iDio.State.17     := iDio.sError;                                                    (* Неисправность модуля *)
    iDio.State.18     := iDio.sNotPwrExt;                                                (* Нет питания 24В на модуле *)
    iDio.State.19     := iDio.sChError;                                                  (* Неисправность каналов *)
    iDio.State.20     := iDio.sFONotLink;                                                (* Порт Fiber Optic>SFP. Нет связи *)
    iDio.State.21     := iDio.sP1NotLink;                                                (* Порт 1 Ethernet. Нет связи *)
    iDio.State.22     := iDio.sP2NotLink;                                                (* Порт 2 Ethernet. Нет связи *)
    iDio.State.23     := iDio.sP3NotLink;                                                (* Порт 3 Ethernet. Нет связи *)
    iDio.State.24     := iDio.sP4NotLink;                                                (* Порт 4 Ethernet. Нет связи *)
    iDio.State.25     := iDio.sFOLink;                                                   (* Порт Fiber Optic>SFP. Есть связь *)
    iDio.State.26     := iDio.sP1Link;                                                   (* Порт 1 Ethernet. Есть связь *)
    iDio.State.27     := iDio.sP2Link;                                                   (* Порт 2 Ethernet. Есть связь *)
    iDio.State.28     := iDio.sP3Link;                                                   (* Порт 3 Ethernet. Есть связь *)
    iDio.State.29     := iDio.sP4Link;                                                   (* Порт 4 Ethernet. Есть связь *)
    iDio.State.30     := iDio.sReserv;                                                   (* Модуль в резерве *)
    iDio.State.31     := iDio.sDisableHART;                                              (* Отключение HART модуля *)
  (* ----------------------------------------------------------- *)
    iData[0,    0]    := GetWordFromDWord(iDio.State, 0);                                (* Состояние Low Word *)
    iData[0,    1]    := GetWordFromDWord(iDio.State, 1);                                (* Состояние Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,    2]    := GetWordFromDWord(iDio.Extend, 0);                               (* Расширение диагностики Low Word *)
    iData[0,    3]    := GetWordFromDWord(iDio.Extend, 1);                               (* Расширение диагностики Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,    4]    := GetWordFromDWord(iDio.DData, 0);                                (* Данные дискретных каналов Low Word *)
    iData[0,    5]    := GetWordFromDWord(iDio.DData, 1);                                (* Данные дискретных каналов Hi Word *)
  (* ----------------------------------------------------------- *)
    iData[0,    6]    := GetWordFromDWord(iDio.DError, 0);                               (* Неисправность каналов Low Word *)
    iData[0,    7]    := GetWordFromDWord(iDio.DError, 1);                               (* Неисправность каналов Hi Word *)
  (* ----------------------------------------------------------- *)
  j:= 0;   while j<=15 do
    iData[0,  j+  8]    :=             iDio.mA[j];                                          (* Данные аналоговых каналов (mA*1000) *)
  j:= j+1; end_while;
  (* ----------------------------------------------------------- *)
    iData[0,   24]    :=             iDio.MsAck_State;                                   (* Состояние (Подтверждение) *)
(* ------------------------------------------------------------------------------------------------------------------ *)
    _dRes:= SafeCopyToModbusREGsArray(iData, iodMBP_4x, 0, 0, m, n, sDio.mbSize);
    iDio.rdCRC:= CRC16ForModbusRegs(iodMBP_4x, m, n, sDio.mbSize);
  end_if;
(* ------------------------------------------------------------------------------------------------------------------ *)
(* Передача из Рабочего объекта *)
  dDio[i]:= iDio;
i:= i+1; end_while;
END_FUNCTION]]></PouBody>
  <PouUIProperties>
    <Root Version="7">
  <LanguageContainerStyle CommentTextColor="Green" CommentFont="Courier New, 10pt" PonctuationTextColor="Black" PonctuationFont="Courier New, 10pt" IdentifierTextColor="Black" IdentifierFont="Courier New, 10pt" OperatorTextColor="Black" OperatorFont="Courier New, 10pt" ReservedWordTextColor="Fuchsia" ReservedWordFont="Courier New, 10pt" PouTextColor="BlueViolet" PouFont="Courier New, 10pt" NumberTextColor="Firebrick" NumberFont="Courier New, 10pt" StringTextColor="Gray" StringFont="Courier New, 10pt" EditorTextAreaBackgroundColor="White" EditorFont="Courier New, 10pt" Index="0" />
</Root>
  </PouUIProperties>
</Pou>